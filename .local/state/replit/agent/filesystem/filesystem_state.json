{"file_contents":{"AZURE_SETUP_INSTRUCTIONS.md":{"content":"# Azure AD Setup Instructions for Microsoft Graph API\n\n## The Issue\nYour application is getting a 401 authentication error when trying to send emails through Microsoft Graph API. This happens because the Azure AD application needs proper permissions and configuration.\n\n## Solution Steps\n\n### 1. Go to Azure Portal\n1. Visit [https://portal.azure.com](https://portal.azure.com)\n2. Sign in with your Microsoft account\n3. Search for \"Azure Active Directory\" or \"App registrations\"\n\n### 2. Find Your App Registration\n1. Click on \"App registrations\" in the left sidebar\n2. Look for an app named \"The Written Hug\" or find your app by the Client ID you provided\n3. Click on your application\n\n### 3. Add Required API Permissions\n1. In your app's page, click on \"API permissions\" in the left sidebar\n2. Click \"Add a permission\"\n3. Select \"Microsoft Graph\"\n4. Choose \"Application permissions\" (not Delegated)\n5. Search for and add these permissions:\n   - **Mail.Send** (essential for sending emails)\n   - **User.Read.All** (if you need to read user info)\n6. Click \"Add permissions\"\n\n### 4. Grant Admin Consent\n**This is the critical step that's likely missing:**\n1. After adding permissions, you'll see a yellow warning banner\n2. Click \"Grant admin consent for [Your Organization]\"\n3. Confirm by clicking \"Yes\"\n4. The status should change to green checkmarks\n\n### 5. Verify Client Secret\n1. Click on \"Certificates & secrets\"\n2. Make sure you have a valid client secret that hasn't expired\n3. If needed, create a new secret and update your environment variables\n\n### 6. Check Authentication Settings\n1. Go to \"Authentication\" in the left sidebar\n2. Ensure \"Allow public client flows\" is set to \"No\" (for security)\n3. Add redirect URIs if needed (though not required for your current setup)\n\n### 7. Verify Application Settings\nMake sure these settings match your environment variables:\n- **Application (client) ID** → `OUTLOOK_CLIENT_ID`\n- **Client secret value** → `OUTLOOK_CLIENT_SECRET`\n- **Directory (tenant) ID** → `OUTLOOK_TENANT_ID`\n\n## Current Workaround\nI've implemented a fallback system that will automatically use Mailjet when Outlook fails, so your email system will continue working while you fix the Azure setup.\n\n## Testing\nAfter completing these steps:\n1. Wait 5-10 minutes for changes to propagate\n2. Try submitting a form through your website\n3. Check the console logs to see if Outlook is working\n\n## Common Issues\n- **Missing admin consent**: Most 401 errors are due to this\n- **Expired client secret**: Check the expiration date\n- **Wrong tenant ID**: Verify you're using the correct directory\n- **Insufficient permissions**: Make sure Mail.Send is granted with admin consent\n\nThe application will continue working with Mailjet as backup while you resolve the Azure setup.","size_bytes":2788},"README-VERCEL.md":{"content":"# Deploy to Vercel\n\nYour application is now Vercel-compatible! Follow these steps to deploy:\n\n## 1. Deploy to Vercel\n\n1. **Push to GitHub/GitLab**:\n   - Create a new repository on GitHub\n   - Push your code: `git add . && git commit -m \"Deploy to Vercel\" && git push`\n\n2. **Connect to Vercel**:\n   - Go to [vercel.com](https://vercel.com)\n   - Click \"New Project\"\n   - Import your repository\n   - Vercel will auto-detect the configuration\n\n## 2. Configure Environment Variables\n\nIn your Vercel dashboard, add these environment variables:\n\n### Required Secrets:\n```\nNEXT_PUBLIC_SUPABASE_URL=your_supabase_url\nSUPABASE_SERVICE_ROLE_KEY=your_supabase_service_key\nMAILJET_API_KEY=your_mailjet_key\nMAILJET_API_SECRET=your_mailjet_secret\nADMIN_EMAIL=onaamikasadguru@gmail.com\nADMIN_FROM_EMAIL=your_verified_sender_email\nMAILJET_TEMPLATE_ID_SUBMISSION=7221431\nMAILJET_TEMPLATE_ID_REPLY=7221146\n```\n\n## 3. What Changed\n\n✅ **No Functionality Changes**: Your app works exactly the same\n✅ **Same Features**: Form submissions, admin system, email notifications\n✅ **Same Database**: Still uses Supabase\n✅ **Same Admin**: Login with SonuHoney/Chipmunk@15#\n\n### Technical Changes:\n- Converted Express routes to Vercel serverless functions\n- Added `vercel.json` configuration\n- Created `/api/` folder with serverless functions\n- Frontend builds to static files\n\n## 4. Testing\n\nAfter deployment:\n1. Visit your Vercel URL\n2. Submit a form (you should receive email)\n3. Access admin portal from footer\n4. Login and manage conversations\n\n## 5. Custom Domain (Optional)\n\nIn Vercel dashboard:\n- Go to Domains tab\n- Add your custom domain\n- Follow DNS configuration steps\n\nYour app will be live at: `https://your-project-name.vercel.app`","size_bytes":1722},"README.md":{"content":"# The Written Hug - Heartfelt Message Delivery Service\n\nA full-stack web application with admin system for managing personalized message delivery services.\n\n## Features\n\n- **Public Website**: Beautiful landing page with service showcase and contact form\n- **Admin Dashboard**: Gmail-like interface for managing submissions and conversations\n- **Email Integration**: Automated notifications via Mailjet\n- **Database**: Supabase integration for data persistence\n\n## Setup Instructions\n\n### Environment Variables\n\nSet these variables in your Replit Secrets:\n\n```bash\n# Supabase\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key\nSUPABASE_SERVICE_ROLE_KEY=your_supabase_service_role_key\n\n# Mailjet\nMAILJET_API_KEY=your_mailjet_api_key\nMAILJET_API_SECRET=your_mailjet_secret\nMAILJET_TEMPLATE_ID_SUBMISSION=7221146\nMAILJET_TEMPLATE_ID_REPLY=7221431\n\n# Admin Configuration\nADMIN_EMAIL=onaamikaonaamika@gmail.com\nADMIN_FROM_EMAIL=onaamikasadguru@gmail.com\n```\n\n### Database Setup\n\nCreate these tables in your Supabase database:\n\n```sql\n-- Submissions table\nCREATE TABLE public.written_hug (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  \"Name\" text,\n  Date timestamptz DEFAULT now(),\n  \"Recipient's Name\" text,\n  Status varchar,\n  \"Email Address\" varchar,\n  \"Phone Number\" float8,\n  \"Type of Message\" varchar,\n  \"Message Details\" varchar,\n  Feelings varchar,\n  Story varchar,\n  \"Specific Details\" varchar,\n  \"Delivery Type\" varchar\n);\n\n-- Replies table\nCREATE TABLE public.hug_replies (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  created_at timestamptz DEFAULT now(),\n  hugid uuid REFERENCES public.written_hug(id) ON DELETE CASCADE,\n  sender_type text,\n  sender_name text,\n  message text\n);\n```\n\n### Mailjet Templates\n\nConfigure these templates in your Mailjet account:\n\n**Template ID 7221146 (Submission notification)** - Variables to use:\n- name, recipient_name, email, phone, type_of_message\n- message_details, feelings, story, specific_details\n- delivery_type, submission_id\n\n**Template ID 7221431 (Reply notification)** - Variables to use:\n- client_name, reply_message, admin_name\n- reply_link, from_email, admin_panel_link\n\n## Usage\n\n1. **Public Form**: Users fill out the contact form on the homepage\n2. **Admin Notification**: Admin receives email notification for new submissions\n3. **Admin Dashboard**: Access via `/admin` with password `admin123`\n4. **Conversation View**: Click \"View Conversation\" to see details and reply\n5. **Client Notification**: Clients receive email replies automatically\n\n## API Endpoints\n\n- `POST /api/submitHug` - Submit new message request\n- `GET /api/getHugs` - Get all submissions (admin)\n- `GET /api/getConversation?hugid=<id>` - Get conversation details\n- `POST /api/sendReply` - Send admin reply\n\n## Tech Stack\n\n- **Frontend**: React, TypeScript, Tailwind CSS, Wouter routing\n- **Backend**: Express.js, Node.js\n- **Database**: Supabase (PostgreSQL)\n- **Email**: Mailjet\n- **UI Components**: Shadcn/ui, Radix UI\n- **Build Tool**: Vite\n\n## Deployment\n\nThis project is configured for Replit deployment. Simply run the \"Start application\" workflow to launch both frontend and backend servers.","size_bytes":3140},"deploy-vercel.sh":{"content":"#!/bin/bash\n\necho \"🚀 Making your app Vercel-ready...\"\n\n# Build the frontend\necho \"📦 Building frontend...\"\ncd client && npm run build && cd ..\n\necho \"✅ Your app is ready for Vercel deployment!\"\necho \"\"\necho \"📋 Next steps:\"\necho \"1. Push this code to GitHub/GitLab\"\necho \"2. Connect your repository to Vercel\"\necho \"3. Add environment variables in Vercel dashboard:\"\necho \"   - NEXT_PUBLIC_SUPABASE_URL\"\necho \"   - SUPABASE_SERVICE_ROLE_KEY\" \necho \"   - MAILJET_API_KEY\"\necho \"   - MAILJET_API_SECRET\"\necho \"   - ADMIN_EMAIL\"\necho \"   - ADMIN_FROM_EMAIL\"\necho \"   - MAILJET_TEMPLATE_ID_SUBMISSION\"\necho \"   - MAILJET_TEMPLATE_ID_REPLY\"\necho \"\"\necho \"🔗 Your app will be live at: https://your-project-name.vercel.app\"","size_bytes":727},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"render.yaml":{"content":"services:\n  - type: web\n    name: written-hug\n    env: node\n    plan: starter\n    buildCommand: npm install && npm run build\n    startCommand: npm start\n    envVars:\n      - key: NODE_ENV\n        value: production\n      - key: BREVO_API_KEY\n        sync: false\n      - key: NEXT_PUBLIC_SUPABASE_ANON_KEY\n        sync: false\n      - key: SUPABASE_SERVICE_ROLE_KEY\n        sync: false\n    autoDeploy: false","size_bytes":404},"replit.md":{"content":"# Overview\n\nThis is a full-stack web application for a heartfelt message delivery service called \"The Written Hug\". The platform specializes in crafting and delivering personalized, emotional messages including love letters, gratitude notes, apologies, and celebration messages. Built with a modern tech stack, it features a beautiful React frontend with extensive UI components, an Express.js backend with Supabase database integration, and a Gmail-like admin system for managing client communications.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Migration (August 14, 2025)\n- Successfully migrated project from Replit Agent to standard Replit environment\n- Fixed package dependencies (tsx, typescript, vite, esbuild)\n- Added all required environment variables for Supabase and Brevo email service\n- **CRITICAL FIX**: Completely resolved email template issue by replacing Brevo templates with direct HTML content\n- **EMAIL IMAGES UPDATED**: Replaced local images with beautiful Cloudinary header images for all email templates\n- **NEW EMAIL DESIGN**: Updated all email templates to match user's custom HTML design with elegant styling\n- **CLOUDINARY OPTIMIZATION**: Implemented optimized Cloudinary URLs with transformations (w_700,c_scale,q_auto:best,f_auto) for faster loading\n- **COMMON FOOTER**: Standardized footer image across all email templates while maintaining unique header images per template type\n- **EMAIL WIDTH FIX**: Fixed email template image width consistency issues - all images now properly constrained to content width\n- **CAPSULE BUTTONS**: Made all admin interface buttons capsule-shaped for better UI consistency (login page, dashboard, and conversation view)\n- **BACKGROUND MUSIC ENHANCED**: \n  - Increased volume to 18% (20% increase from original 15%)\n  - Added smooth fade transitions during loop (0.1s fade out/in for seamless looping)\n  - Extended to all admin pages (dashboard, login, conversation view)\n  - Implemented proper fade in/out on page visibility changes\n- **SENDER NAME UPDATE**: Changed reply sender from \"sonuhoney\" to \"CEO-The Written Hug\" across all admin interfaces\n- **CONVERSATION UI**: Updated conversation history messages with capsule-shaped buttons for consistent design\n- **RENDER DEPLOYMENT READY**: Prepared application for Render hosting with proper build scripts and deployment configuration\n- Email system fully functional with beautiful designs: admin notifications, user confirmations, and reply emails\n- Enhanced admin dashboard with improved background elements: reduced opacity, sparse layout, smooth floating animations\n- Changed admin dashboard \"Website\" button to \"Written Hug\" for better branding\n- Server running successfully on port 5000 with Express.js and Vite integration\n- All API endpoints tested and confirmed working (submission, admin dashboard, reply system)\n\n### Email Template Images (Cloudinary Optimized)\n- Footer: Black minimalist banner - `https://res.cloudinary.com/dwmybitme/image/upload/w_700,c_scale,q_auto:best,f_auto/v1755175867/Black_Minimalist_Linkedin_Banner_tmtk7h.png`\n- Admin Header: Green watercolor wedding banner - `https://res.cloudinary.com/dwmybitme/image/upload/w_700,c_scale,q_auto:best,f_auto/v1755175843/Green_Watercolor_Elegant_Wedding_Banner_Landscape_tjpw6a.jpg`\n- User Header: Pink and white floral wedding banner - `https://res.cloudinary.com/dwmybitme/image/upload/w_700,c_scale,q_auto:best,f_auto/v1755175842/Pink_and_White_Floral_Wedding_Banner_5_gqw6u8.jpg`\n- Reply Header: Pink and white floral banner for orders page - `https://res.cloudinary.com/dwmybitme/image/upload/w_700,c_scale,q_auto:best,f_auto/v1755175889/Pink_and_White_Floral_Wedding_Banner_tosxqh.png`\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Framework**: Shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **State Management**: TanStack React Query for server state and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Styling**: Tailwind CSS with custom design system variables and Google Fonts integration\n- **Form Handling**: React Hook Form with Zod validation schemas\n\n## Backend Architecture\n- **Runtime**: Node.js with TypeScript and ESM modules\n- **Framework**: Express.js for HTTP server and API routes\n- **Development**: TSX for TypeScript execution in development\n- **Build**: ESBuild for production bundling\n- **Middleware**: Custom logging middleware for API request tracking\n\n## Data Storage\n- **Database**: PostgreSQL with Supabase as the serverless provider\n- **ORM**: Direct Supabase client integration for real-time operations\n- **Schema**: Form submissions (written_hug) and conversation replies (hug_replies) tables\n- **Connection**: Supabase client with service role key for admin operations\n- **Admin System**: Gmail-like interface for managing submissions and client communications\n\n## Authentication & Session Management\n- **Session Storage**: PostgreSQL-backed sessions using connect-pg-simple\n- **User Schema**: Basic user model with username and hashed password fields\n- **Storage Abstraction**: Interface-based design allowing for multiple storage implementations\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: Serverless PostgreSQL connection driver for Neon Database\n- **drizzle-orm & drizzle-kit**: Type-safe ORM with migration capabilities\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n\n### UI & Design\n- **@radix-ui/***: Comprehensive set of accessible UI primitives (30+ components)\n- **tailwindcss**: Utility-first CSS framework with custom design tokens\n- **class-variance-authority**: Type-safe variant API for component styling\n- **lucide-react**: Modern icon library for React components\n\n### Form & Validation\n- **react-hook-form**: Performant form library with minimal re-renders\n- **@hookform/resolvers**: Integration layer for validation libraries\n- **zod**: TypeScript-first schema validation library\n- **drizzle-zod**: Integration between Drizzle schemas and Zod validation\n\n### Development Tools\n- **vite**: Modern build tool with HMR and TypeScript support\n- **@replit/vite-plugin-runtime-error-modal**: Development error overlay for Replit environment\n- **@replit/vite-plugin-cartographer**: Development tooling for Replit integration\n\n### External Services\n- **Supabase**: Database and real-time functionality for form submissions and admin management\n- **Mailjet**: Email service for automated notifications to admin and reply emails to clients\n- **Google Fonts**: Typography with Inter and Great Vibes font families\n- **Custom Admin Dashboard**: Gmail-like interface accessible at /admin with conversation management\n\nThe application follows a monorepo structure with shared TypeScript configurations, centralized schema definitions, and clear separation between client, server, and shared code. The build system supports both development and production environments with proper static asset handling and API routing.","size_bytes":7091},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"api/adminLogin.ts":{"content":"import { VercelRequest, VercelResponse } from '@vercel/node';\nimport { z } from 'zod';\n\nconst adminLoginSchema = z.object({\n  username: z.string(),\n  password: z.string(),\n});\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (req.method !== 'POST') {\n    return res.status(405).json({ success: false, message: 'Method not allowed' });\n  }\n\n  try {\n    const { username, password } = adminLoginSchema.parse(req.body);\n    \n    // Simple hardcoded admin credentials\n    if (username === 'SonuHoney' && password === 'Chipmunk@15#') {\n      res.json({ success: true, message: 'Login successful' });\n    } else {\n      res.status(401).json({ success: false, message: 'Invalid credentials' });\n    }\n  } catch (error) {\n    console.error('Admin login error:', error);\n    res.status(400).json({ \n      success: false, \n      message: error instanceof Error ? error.message : 'Login failed' \n    });\n  }\n}","size_bytes":936},"api/getConversation.ts":{"content":"import { VercelRequest, VercelResponse } from '@vercel/node';\nimport { createClient } from '@supabase/supabase-js';\n\n// Initialize Supabase client\nconst supabaseAdmin = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL || '',\n  process.env.SUPABASE_SERVICE_ROLE_KEY || ''\n);\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (req.method !== 'GET') {\n    return res.status(405).json({ success: false, message: 'Method not allowed' });\n  }\n\n  try {\n    const { hugid } = req.query;\n    \n    if (!hugid) {\n      return res.status(400).json({ success: false, message: 'hugid required' });\n    }\n\n    // Get the hug\n    const { data: hug, error: hugError } = await supabaseAdmin\n      .from('written hug')\n      .select('*')\n      .eq('id', hugid)\n      .single();\n\n    if (hugError) throw hugError;\n\n    // Get replies (note: table name has space)\n    const { data: replies, error: repliesError } = await supabaseAdmin\n      .from('hug replies')\n      .select('*')\n      .eq('hugid', hugid)\n      .order('created_at', { ascending: true });\n\n    if (repliesError) throw repliesError;\n\n    res.json({ success: true, hug, replies });\n  } catch (error) {\n    console.error('Get conversation error:', error);\n    res.status(500).json({ \n      success: false, \n      message: error instanceof Error ? error.message : 'Failed to fetch conversation' \n    });\n  }\n}","size_bytes":1392},"api/getHugs.ts":{"content":"import { VercelRequest, VercelResponse } from '@vercel/node';\nimport { createClient } from '@supabase/supabase-js';\n\n// Initialize Supabase client\nconst supabaseAdmin = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL || '',\n  process.env.SUPABASE_SERVICE_ROLE_KEY || ''\n);\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (req.method !== 'GET') {\n    return res.status(405).json({ success: false, message: 'Method not allowed' });\n  }\n\n  try {\n    const { data: hugs, error } = await supabaseAdmin\n      .from('written hug')\n      .select('*')\n      .order('Date', { ascending: false });\n\n    if (error) throw error;\n\n    res.json({ success: true, hugs });\n  } catch (error) {\n    console.error('Get hugs error:', error);\n    res.status(500).json({ \n      success: false, \n      message: error instanceof Error ? error.message : 'Failed to fetch hugs' \n    });\n  }\n}","size_bytes":909},"api/sendReply.ts":{"content":"import { VercelRequest, VercelResponse } from '@vercel/node';\nimport { createClient } from '@supabase/supabase-js';\nimport { z } from 'zod';\nimport Mailjet from 'node-mailjet';\n\nconst sendReplySchema = z.object({\n  hugid: z.string().uuid(),\n  message: z.string().min(1, \"Message is required\"),\n  admin_name: z.string().min(1, \"Admin name is required\"),\n});\n\n// Initialize Supabase client\nconst supabaseAdmin = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL || '',\n  process.env.SUPABASE_SERVICE_ROLE_KEY || ''\n);\n\n// Initialize Mailjet\nconst mailjet = new Mailjet({\n  apiKey: process.env.MAILJET_API_KEY || '',\n  apiSecret: process.env.MAILJET_API_SECRET || ''\n});\n\nasync function sendReplyEmail(clientEmail: string, emailData: any) {\n  try {\n    const request = await mailjet\n      .post(\"send\", {'version': 'v3.1'})\n      .request({\n        Messages: [\n          {\n            From: {\n              Email: process.env.ADMIN_FROM_EMAIL || '',\n              Name: \"CEO-The Written Hug\"\n            },\n            To: [\n              {\n                Email: clientEmail,\n                Name: emailData.client_name\n              }\n            ],\n            TemplateID: parseInt(process.env.MAILJET_TEMPLATE_ID_REPLY || '7221146'),\n            TemplateLanguage: true,\n            Subject: \"You've Got a Kabootar from CEO-The Written Hug\",\n            Variables: {\n              client_name: emailData.client_name,\n              reply_message: emailData.reply_message,\n              admin_name: \"CEO-The Written Hug\",\n              from_email: emailData.from_email,\n              reply_link: emailData.reply_link,\n            }\n          }\n        ]\n      });\n    return true;\n  } catch (error) {\n    console.error('Reply email error:', error);\n    return false;\n  }\n}\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (req.method !== 'POST') {\n    return res.status(405).json({ success: false, message: 'Method not allowed' });\n  }\n\n  try {\n    const validatedData = sendReplySchema.parse(req.body);\n\n    // Insert reply into database with CEO-The Written Hug as sender (note: table name has space)\n    const { data: reply, error: replyError } = await supabaseAdmin\n      .from('hug replies')\n      .insert([{\n        hugid: validatedData.hugid,\n        sender_type: 'admin',\n        sender_name: 'CEO-The Written Hug',\n        message: validatedData.message,\n      }])\n      .select()\n      .single();\n\n    if (replyError) throw replyError;\n\n    // Get client details\n    const { data: hug, error: hugError } = await supabaseAdmin\n      .from('written hug')\n      .select('Name, \"Email Address\"')\n      .eq('id', validatedData.hugid)\n      .single();\n\n    if (hugError) throw hugError;\n    if (!hug) throw new Error('Hug not found');\n\n    // Send email to client\n    const emailSent = await sendReplyEmail(hug['Email Address'] as string, {\n      client_name: hug.Name as string,\n      reply_message: validatedData.message,\n      admin_name: validatedData.admin_name,\n      from_email: process.env.ADMIN_FROM_EMAIL || '',\n      reply_link: `${req.headers.host}/admin/${validatedData.hugid}`,\n    });\n\n    // Update status to \"Replied\"\n    await supabaseAdmin\n      .from('written hug')\n      .update({ Status: 'Replied' })\n      .eq('id', validatedData.hugid);\n\n    res.json({ success: true, reply, emailSent });\n  } catch (error) {\n    console.error('Send reply error:', error);\n    res.status(500).json({ \n      success: false, \n      message: error instanceof Error ? error.message : 'Failed to send reply' \n    });\n  }\n}","size_bytes":3567},"api/submitHug.ts":{"content":"import { VercelRequest, VercelResponse } from '@vercel/node';\nimport { createClient } from '@supabase/supabase-js';\nimport { z } from 'zod';\nimport Mailjet from 'node-mailjet';\n\n// Validation schema\nconst submitHugSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  phone: z.string().min(1, \"Phone is required\"),\n  recipientName: z.string().min(1, \"Recipient name is required\"),\n  serviceType: z.string().min(1, \"Service type is required\"),\n  deliveryType: z.string().min(1, \"Delivery type is required\"),\n  feelings: z.string().min(1, \"Feelings are required\"),\n  story: z.string().min(1, \"Story is required\"),\n  specificDetails: z.string().min(1, \"Specific details are required\"),\n});\n\n// Initialize Supabase client\nconst supabaseAdmin = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL || '',\n  process.env.SUPABASE_SERVICE_ROLE_KEY || ''\n);\n\n// Initialize Mailjet\nconst mailjet = new Mailjet({\n  apiKey: process.env.MAILJET_API_KEY || '',\n  apiSecret: process.env.MAILJET_API_SECRET || ''\n});\n\nasync function sendSubmissionEmail(formData: any) {\n  try {\n    const request = await mailjet\n      .post(\"send\", {'version': 'v3.1'})\n      .request({\n        Messages: [\n          {\n            From: {\n              Email: process.env.ADMIN_FROM_EMAIL || '',\n              Name: \"CEO-The Written Hug\"\n            },\n            To: [\n              {\n                Email: \"onaamikaonaamika@gmail.com\",\n                Name: \"Admin\"\n              }\n            ],\n            Bcc: [\n              {\n                Email: \"bintemp8@gmail.com\",\n                Name: \"BCC Admin\"\n              }\n            ],\n            TemplateID: parseInt(process.env.MAILJET_TEMPLATE_ID_SUBMISSION || '7221431'),\n            TemplateLanguage: true,\n            Subject: `You've Got a Kabootar from ${formData.name}`,\n            Variables: {\n              client_name: formData.name,\n              recipient_name: formData.recipientName,\n              email: formData.email,\n              phone: formData.phone,\n              service_type: formData.serviceType,\n              delivery_type: formData.deliveryType,\n              feelings: formData.feelings,\n              story: formData.story,\n              specific_details: formData.specificDetails,\n              submission_date: new Date().toLocaleDateString(),\n            }\n          }\n        ]\n      });\n    return true;\n  } catch (error) {\n    console.error('Mailjet error:', error);\n    return false;\n  }\n}\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (req.method !== 'POST') {\n    return res.status(405).json({ success: false, message: 'Method not allowed' });\n  }\n\n  try {\n    const validatedData = submitHugSchema.parse(req.body);\n    \n    // Insert into Supabase (note: table name has space)\n    const { data: hug, error } = await supabaseAdmin\n      .from('written hug')\n      .insert([{\n        'Name': validatedData.name,\n        'Recipient\\'s Name': validatedData.recipientName,\n        'Email Address': validatedData.email,\n        'Phone Number': parseInt(validatedData.phone),\n        'Type of Message': validatedData.serviceType,\n        'Message Details': `${validatedData.feelings}\\n\\n${validatedData.story}`,\n        'Feelings': validatedData.feelings,\n        'Story': validatedData.story,\n        'Specific Details': validatedData.specificDetails,\n        'Delivery Type': validatedData.deliveryType,\n        'Status': 'New',\n        'Date': new Date().toISOString(),\n      }])\n      .select()\n      .single();\n\n    if (error) throw error;\n\n    // Send notification email\n    const emailSent = await sendSubmissionEmail(validatedData);\n\n    res.json({ success: true, hug, emailSent });\n  } catch (error) {\n    console.error('Submit hug error:', error);\n    res.status(400).json({ \n      success: false, \n      message: error instanceof Error ? error.message : 'Failed to submit hug' \n    });\n  }\n}","size_bytes":3976},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { supabaseAdmin } from \"./lib/supabase\";\nimport { sendSubmissionEmail, sendReplyEmail } from \"./lib/brevo\";\nimport { z } from \"zod\";\n\nconst submitHugSchema = z.object({\n  name: z.string(),\n  email: z.string().email(),\n  phone: z.string(),\n  recipientName: z.string(),\n  serviceType: z.string(),\n  deliveryType: z.string(),\n  feelings: z.string(),\n  story: z.string(),\n  specificDetails: z.string().optional(),\n});\n\nconst sendReplySchema = z.object({\n  hugid: z.string().uuid(),\n  message: z.string(),\n  admin_name: z.string(),\n});\n\nconst markEmailReadSchema = z.object({\n  replyId: z.string().uuid(),\n});\n\nconst incomingEmailSchema = z.object({\n  hugid: z.string().uuid(),\n  fromEmail: z.string().email(),\n  subject: z.string(),\n  message: z.string(),\n  messageId: z.string().optional(),\n});\n\nconst adminLoginSchema = z.object({\n  username: z.string(),\n  password: z.string(),\n  location: z.object({\n    latitude: z.number(),\n    longitude: z.number(),\n    city: z.string().optional(),\n    country: z.string().optional(),\n  }).optional(),\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Submit hug form\n  app.post(\"/api/submitHug\", async (req, res) => {\n    try {\n      const validatedData = submitHugSchema.parse(req.body);\n      \n      // Insert into Supabase (note: table name has space)\n      const { data: hug, error } = await supabaseAdmin\n        .from('written hug')\n        .insert([{\n          'Name': validatedData.name,\n          'Recipient\\'s Name': validatedData.recipientName,\n          'Status': 'New',\n          'Email Address': validatedData.email,\n          'Phone Number': parseFloat(validatedData.phone),\n          'Type of Message': validatedData.serviceType,\n          'Message Details': `${validatedData.feelings}\\n\\n${validatedData.story}`,\n          'Feelings': validatedData.feelings,\n          'Story': validatedData.story,\n          'Specific Details': validatedData.specificDetails || '',\n          'Delivery Type': validatedData.deliveryType,\n        }])\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // Send email notification using Brevo\n      console.log('Attempting to send email with Brevo:', {\n        hasApiKey: !!process.env.BREVO_API_KEY,\n        hasAdminTemplate: !!process.env.BREVO_ADMIN_TEMPLATE_ID,\n        hasUserTemplate: !!process.env.BREVO_USER_TEMPLATE_ID,\n      });\n      let emailSent = await sendSubmissionEmail({\n        name: validatedData.name,\n        recipient_name: validatedData.recipientName,\n        email: validatedData.email,\n        phone: validatedData.phone,\n        type_of_message: validatedData.serviceType,\n        message_details: `${validatedData.feelings}\\n\\n${validatedData.story}`,\n        feelings: validatedData.feelings,\n        story: validatedData.story,\n        specific_details: validatedData.specificDetails || '',\n        delivery_type: validatedData.deliveryType,\n        submission_id: hug.id,\n      });\n\n      console.log('Email send result:', emailSent);\n      res.json({ success: true, hug, emailSent });\n    } catch (error) {\n      console.error('Submit hug error:', error);\n      res.status(400).json({ \n        success: false, \n        message: error instanceof Error ? error.message : 'Failed to submit' \n      });\n    }\n  });\n\n  // Get all hugs for admin\n  app.get(\"/api/getHugs\", async (req, res) => {\n    try {\n      const { data: hugs, error } = await supabaseAdmin\n        .from('written hug')\n        .select('*')\n        .order('Date', { ascending: false });\n\n      if (error) throw error;\n\n      res.json({ success: true, hugs });\n    } catch (error) {\n      console.error('Get hugs error:', error);\n      res.status(500).json({ \n        success: false, \n        message: error instanceof Error ? error.message : 'Failed to fetch hugs' \n      });\n    }\n  });\n\n  // Get conversation (hug + replies)\n  app.get(\"/api/getConversation\", async (req, res) => {\n    try {\n      const hugid = req.query.hugid as string;\n      if (!hugid) {\n        return res.status(400).json({ success: false, message: 'hugid required' });\n      }\n\n      // Get the hug\n      const { data: hug, error: hugError } = await supabaseAdmin\n        .from('written hug')\n        .select('*')\n        .eq('id', hugid)\n        .single();\n\n      if (hugError) throw hugError;\n\n      // Get replies (note: table name has space)\n      const { data: replies, error: repliesError } = await supabaseAdmin\n        .from('hug replies')\n        .select('*')\n        .eq('hugid', hugid)\n        .order('created_at', { ascending: true });\n\n      if (repliesError) throw repliesError;\n\n      res.json({ success: true, hug, replies });\n    } catch (error) {\n      console.error('Get conversation error:', error);\n      res.status(500).json({ \n        success: false, \n        message: error instanceof Error ? error.message : 'Failed to fetch conversation' \n      });\n    }\n  });\n\n  // Send reply\n  app.post(\"/api/sendReply\", async (req, res) => {\n    try {\n      const validatedData = sendReplySchema.parse(req.body);\n\n      // Insert reply into database with CEO-The Written Hug as sender (note: table name has space)\n      const { data: reply, error: replyError } = await supabaseAdmin\n        .from('hug replies')\n        .insert([{\n          hugid: validatedData.hugid,\n          sender_type: 'admin',\n          sender_name: 'CEO-The Written Hug',\n          message: validatedData.message\n        }])\n        .select()\n        .single();\n\n      if (replyError) throw replyError;\n\n      // Get client details\n      const { data: hug, error: hugError } = await supabaseAdmin\n        .from('written hug')\n        .select('Name, \"Email Address\"')\n        .eq('id', validatedData.hugid)\n        .single();\n\n      if (hugError) throw hugError;\n      if (!hug) throw new Error('Hug not found');\n\n      // Send reply email using Brevo\n      let emailSent = await sendReplyEmail(hug['Email Address'] as string, {\n        client_name: hug.Name as string,\n        reply_message: validatedData.message,\n        admin_name: validatedData.admin_name,\n        from_email: process.env.ADMIN_FROM_EMAIL || '',\n        reply_link: `${req.protocol}://${req.get('host')}/admin/${validatedData.hugid}`,\n      });\n\n\n\n      // Update status to \"Replied\"\n      await supabaseAdmin\n        .from('written hug')\n        .update({ Status: 'Replied' })\n        .eq('id', validatedData.hugid);\n\n      res.json({ success: true, reply, emailSent });\n    } catch (error) {\n      console.error('Send reply error:', error);\n      res.status(400).json({ \n        success: false, \n        message: error instanceof Error ? error.message : 'Failed to send reply' \n      });\n    }\n  });\n\n  // Mark email/reply as read\n  app.post(\"/api/markEmailRead\", async (req, res) => {\n    try {\n      const validatedData = markEmailReadSchema.parse(req.body);\n\n      const { error } = await supabaseAdmin\n        .from('hug replies')\n        .update({ sender_type: 'read' }) // Temporary workaround\n        .eq('id', validatedData.replyId);\n\n      if (error) throw error;\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Mark email read error:', error);\n      res.status(400).json({ \n        success: false, \n        message: error instanceof Error ? error.message : 'Failed to mark as read' \n      });\n    }\n  });\n\n  // Handle incoming email response (webhook endpoint)\n  app.post(\"/api/incomingEmail\", async (req, res) => {\n    try {\n      const validatedData = incomingEmailSchema.parse(req.body);\n\n      // Insert incoming email as a reply\n      const { data: reply, error: replyError } = await supabaseAdmin\n        .from('hug replies')\n        .insert([{\n          hugid: validatedData.hugid,\n          sender_type: 'client',\n          sender_name: '', // Will be filled from hug data\n          message: validatedData.message,\n        }])\n        .select()\n        .single();\n\n      if (replyError) throw replyError;\n\n      // Update sender name from hug data\n      const { data: hug } = await supabaseAdmin\n        .from('written hug')\n        .select('Name')\n        .eq('id', validatedData.hugid)\n        .single();\n\n      if (hug) {\n        await supabaseAdmin\n          .from('hug replies')\n          .update({ sender_name: hug.Name })\n          .eq('id', reply.id);\n      }\n\n      // Update hug status to show there's a new response\n      await supabaseAdmin\n        .from('written hug')\n        .update({ Status: 'Client Replied' })\n        .eq('id', validatedData.hugid);\n\n      res.json({ success: true, reply });\n    } catch (error) {\n      console.error('Incoming email error:', error);\n      res.status(400).json({ \n        success: false, \n        message: error instanceof Error ? error.message : 'Failed to process incoming email' \n      });\n    }\n  });\n\n  // Get unread message count for admin dashboard\n  app.get(\"/api/getUnreadCount\", async (req, res) => {\n    try {\n      // For now, return 0 since we don't have the is_read column yet\n      res.json({ success: true, unreadCount: 0 });\n    } catch (error) {\n      console.error('Get unread count error:', error);\n      res.status(500).json({ \n        success: false, \n        message: error instanceof Error ? error.message : 'Failed to get unread count' \n      });\n    }\n  });\n\n  // Test email configuration\n  app.get(\"/api/testEmail\", async (req, res) => {\n    try {\n      console.log('Testing email configuration...');\n      console.log('Environment variables check:', {\n        hasClientId: !!process.env.OUTLOOK_CLIENT_ID,\n        hasClientSecret: !!process.env.OUTLOOK_CLIENT_SECRET,\n        hasTenantId: !!process.env.OUTLOOK_TENANT_ID,\n        hasAdminEmail: !!process.env.ADMIN_FROM_EMAIL,\n        adminEmail: process.env.ADMIN_FROM_EMAIL,\n        clientIdLength: process.env.OUTLOOK_CLIENT_ID?.length,\n        tenantIdLength: process.env.OUTLOOK_TENANT_ID?.length\n      });\n\n      const testResult = await sendSubmissionEmail({\n        name: \"Test User\",\n        recipient_name: \"Test Recipient\",\n        email: \"test@example.com\",\n        phone: \"1234567890\",\n        type_of_message: \"Test Message Type\",\n        message_details: \"This is a test email to verify the new template works correctly.\",\n        feelings: \"Testing feelings section\",\n        story: \"Testing story section with multiple lines\\nThis should show on a new line\",\n        specific_details: \"Testing specific details section\",\n        delivery_type: \"Digital\",\n        submission_id: \"test-123\",\n      });\n      \n      res.json({ \n        success: testResult, \n        message: testResult ? \"Test email sent successfully with new template\" : \"Test email failed - check server logs for details\",\n        environment: {\n          hasClientId: !!process.env.OUTLOOK_CLIENT_ID,\n          hasClientSecret: !!process.env.OUTLOOK_CLIENT_SECRET,\n          hasTenantId: !!process.env.OUTLOOK_TENANT_ID,\n          hasAdminEmail: !!process.env.ADMIN_FROM_EMAIL,\n          adminEmail: process.env.ADMIN_FROM_EMAIL,\n        },\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('Test email error:', error);\n      res.status(500).json({ \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error',\n        stack: error instanceof Error ? error.stack : undefined,\n        environment: {\n          hasClientId: !!process.env.OUTLOOK_CLIENT_ID,\n          hasClientSecret: !!process.env.OUTLOOK_CLIENT_SECRET,\n          hasTenantId: !!process.env.OUTLOOK_TENANT_ID,\n          hasAdminEmail: !!process.env.ADMIN_FROM_EMAIL,\n          adminEmail: process.env.ADMIN_FROM_EMAIL,\n        },\n        timestamp: new Date().toISOString()\n      });\n    }\n  });\n\n  // Admin login\n  app.post(\"/api/adminLogin\", async (req, res) => {\n    try {\n      const { username, password, location } = adminLoginSchema.parse(req.body);\n      \n      // Simple authentication check\n      if (username === \"SonuHoney\" && password === \"Chipmunk@15#\") {\n        // Log the admin login with location data\n        if (location) {\n          try {\n            await supabaseAdmin\n              .from('admin_login_logs')\n              .insert([{\n                username,\n                latitude: location.latitude,\n                longitude: location.longitude,\n                city: location.city || null,\n                country: location.country || null,\n                ip_address: req.ip || req.connection.remoteAddress || 'unknown',\n                user_agent: req.get('User-Agent') || 'unknown'\n              }]);\n          } catch (logError) {\n            console.error('Failed to log admin login:', logError);\n            // Don't fail the login if logging fails\n          }\n        }\n        \n        res.json({ success: true, message: \"Login successful\" });\n      } else {\n        res.status(401).json({ success: false, message: \"Invalid credentials\" });\n      }\n    } catch (error) {\n      res.status(400).json({ \n        success: false, \n        message: \"Invalid request\" \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":13201},"server/storage.ts":{"content":"import { users, type User, type InsertUser } from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  currentId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.currentId = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1012},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Admin login schema with location tracking\nexport const adminLoginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n  location: z.object({\n    latitude: z.number(),\n    longitude: z.number(),\n    city: z.string().optional(),\n    country: z.string().optional(),\n  }).optional(),\n});\n","size_bytes":898},"shared/supabase-schema.ts":{"content":"import { pgTable, text, timestamp, uuid, varchar, doublePrecision } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const writtenHug = pgTable(\"written_hug\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  Name: text(\"Name\"),\n  Date: timestamp(\"Date\", { withTimezone: true }).defaultNow(),\n  \"Recipient's Name\": text(\"Recipient's Name\"),\n  Status: varchar(\"Status\"),\n  \"Email Address\": varchar(\"Email Address\"),\n  \"Phone Number\": doublePrecision(\"Phone Number\"),\n  \"Type of Message\": varchar(\"Type of Message\"),\n  \"Message Details\": varchar(\"Message Details\"),\n  Feelings: varchar(\"Feelings\"),\n  Story: varchar(\"Story\"),\n  \"Specific Details\": varchar(\"Specific Details\"),\n  \"Delivery Type\": varchar(\"Delivery Type\"),\n});\n\nexport const hugReplies = pgTable(\"hug_replies\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  created_at: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  hugid: uuid(\"hugid\").references(() => writtenHug.id, { onDelete: \"cascade\" }),\n  sender_type: text(\"sender_type\"), // 'admin' or 'client'\n  sender_name: text(\"sender_name\"),\n  message: text(\"message\"),\n  is_read: text(\"is_read\").default(\"false\"), // Add missing column\n  email_sent: text(\"email_sent\").default(\"false\"), // Add missing column\n});\n\nexport const adminLoginLogs = pgTable(\"admin_login_logs\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  created_at: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  username: text(\"username\"),\n  latitude: doublePrecision(\"latitude\"),\n  longitude: doublePrecision(\"longitude\"),\n  city: text(\"city\"),\n  country: text(\"country\"),\n  ip_address: text(\"ip_address\"),\n  user_agent: text(\"user_agent\"),\n});\n\nexport const insertWrittenHugSchema = createInsertSchema(writtenHug).omit({\n  id: true,\n  Date: true,\n});\n\nexport const insertHugReplySchema = createInsertSchema(hugReplies).omit({\n  id: true,\n  created_at: true,\n});\n\nexport type InsertWrittenHug = z.infer<typeof insertWrittenHugSchema>;\nexport type WrittenHug = typeof writtenHug.$inferSelect;\nexport type InsertHugReply = z.infer<typeof insertHugReplySchema>;\nexport type HugReply = typeof hugReplies.$inferSelect;","size_bytes":2198},"client/src/App.css":{"content":"#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n","size_bytes":606},"client/src/App.tsx":{"content":"import { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { Router, Route, Switch } from \"wouter\";\nimport Index from \"./pages/Index\";\nimport AdminLogin from \"./pages/AdminLogin\";\nimport AdminDashboard from \"./pages/AdminDashboard\";\nimport AdminConversation from \"./pages/AdminConversation\";\nimport NotFound from \"./pages/NotFound\";\n\nconst queryClient = new QueryClient();\n\nconst App = () => (\n  <QueryClientProvider client={queryClient}>\n    <TooltipProvider>\n      <Toaster />\n      <Sonner />\n      <Router>\n        <Switch>\n          <Route path=\"/\" component={Index} />\n          <Route path=\"/admin/login\" component={AdminLogin} />\n          <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n          <Route path=\"/admin/orders\" component={AdminDashboard} />\n          <Route path=\"/admin/conversation/:id\" component={AdminConversation} />\n          <Route path=\"/admin\" component={() => {\n            // Redirect /admin to /admin/login\n            window.location.href = '/admin/login';\n            return null;\n          }} />\n          <Route component={NotFound} />\n        </Switch>\n      </Router>\n    </TooltipProvider>\n  </QueryClientProvider>\n);\n\nexport default App;\n","size_bytes":1386},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Playfair+Display:wght@400;500;600;700&family=Great+Vibes&display=swap');\n@import url('https://fonts.cdnfonts.com/css/canduful');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Definition of the design system. All colors, gradients, fonts, etc should be defined here. */\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n\n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 222.2 84% 4.9%;\n\n    --radius: 0.5rem;\n\n    --sidebar-background: 0 0% 98%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 240 5.9% 10%;\n    --sidebar-primary-foreground: 0 0% 98%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: 'Playfair Display', serif;\n  }\n\n  .canduful-font {\n    font-family: 'Canduful', cursive, 'Playfair Display', serif;\n  }\n  \n  .great-vibes-font {\n    font-family: 'Great Vibes', cursive;\n  }\n}\n\n/* Glass effect for premium navbar */\n.glass-premium {\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(20px);\n  -webkit-backdrop-filter: blur(20px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n/* Times New Roman italic style for hero subtitle */\n.times-new-roman-italic {\n  font-family: 'Times New Roman', Times, serif;\n  font-style: italic;\n}\n\n/* Premium smooth scrolling with easing */\nhtml {\n  scroll-behavior: smooth;\n}\n\n.premium-scroll {\n  scroll-behavior: smooth;\n}\n\n/* Premium scrollbar with smooth animations */\n::-webkit-scrollbar {\n  width: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: linear-gradient(180deg, hsl(var(--muted)), hsl(var(--muted)/0.5));\n  border-radius: 10px;\n}\n\n::-webkit-scrollbar-thumb {\n  background: linear-gradient(180deg, hsl(var(--primary)), hsl(var(--primary)/0.7));\n  border-radius: 10px;\n  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: linear-gradient(180deg, hsl(var(--primary)), hsl(var(--primary)/0.9));\n  transform: scale(1.2);\n  box-shadow: 0 0 10px hsl(var(--primary)/0.3);\n}\n\n/* Enhanced floating animations with smooth easing */\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px) rotate(0deg);\n  }\n  33% {\n    transform: translateY(-8px) rotate(1deg);\n  }\n  66% {\n    transform: translateY(-4px) rotate(-0.5deg);\n  }\n}\n\n.animate-float {\n  animation: float 12s ease-in-out infinite;\n}\n\n/* Premium smooth bounce animation */\n@keyframes bounce-premium {\n  0%, 100% {\n    transform: translateY(0) scale(1);\n    animation-timing-function: cubic-bezier(0.8, 0, 1, 1);\n  }\n  50% {\n    transform: translateY(-15px) scale(1.05);\n    animation-timing-function: cubic-bezier(0, 0, 0.2, 1);\n  }\n}\n\n.animate-bounce-premium {\n  animation: bounce-premium 6s ease-in-out infinite;\n}\n\n/* Smooth gradient text animation */\n@keyframes gradient-flow {\n  0%, 100% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n}\n\n.animate-gradient-flow {\n  background: linear-gradient(-45deg, #8b5cf6, #ec4899, #06b6d4, #10b981);\n  background-size: 300% 300%;\n  animation: gradient-flow 8s ease infinite;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n/* Premium pulsing with soft glow */\n@keyframes pulse-soft {\n  0%, 100% {\n    opacity: 0.4;\n    transform: scale(1);\n  }\n  50% {\n    opacity: 0.8;\n    transform: scale(1.1);\n  }\n}\n\n.animate-pulse-soft {\n  animation: pulse-soft 4s ease-in-out infinite;\n}\n\n/* Ultra smooth hover transitions with premium easing */\n.hover-lift-premium {\n  transition: all 0.6s cubic-bezier(0.23, 1, 0.32, 1);\n}\n\n.hover-lift-premium:hover {\n  transform: translateY(-12px) scale(1.03) rotateX(5deg);\n  box-shadow: \n    0 25px 50px rgba(0, 0, 0, 0.08),\n    0 10px 25px rgba(0, 0, 0, 0.06),\n    0 0 0 1px rgba(255, 255, 255, 0.05);\n}\n\n/* Smooth card hover with rounded corners */\n.card-hover-smooth {\n  transition: all 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  border-radius: 1.5rem;\n}\n\n.card-hover-smooth:hover {\n  border-radius: 2rem;\n  transform: translateY(-8px) scale(1.02);\n  box-shadow: \n    0 20px 40px rgba(0, 0, 0, 0.1),\n    0 8px 16px rgba(0, 0, 0, 0.06);\n}\n\n/* Premium fade-in with smooth easing */\n@keyframes fadeInSmooth {\n  from {\n    opacity: 0;\n    transform: translate3d(0, 30px, 0) scale(0.98);\n  }\n  to {\n    opacity: 1;\n    transform: translate3d(0, 0, 0) scale(1);\n  }\n}\n\n.animate-fade-in-smooth {\n  animation: fadeInSmooth 1s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n/* Premium glass morphism with smooth backdrop */\n.glass-premium {\n  backdrop-filter: blur(20px) saturate(150%);\n  -webkit-backdrop-filter: blur(20px) saturate(150%);\n  background: linear-gradient(\n    135deg,\n    rgba(255, 255, 255, 0.1),\n    rgba(255, 255, 255, 0.05)\n  );\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n.glass-premium:hover {\n  backdrop-filter: blur(25px) saturate(180%);\n  background: linear-gradient(\n    135deg,\n    rgba(255, 255, 255, 0.15),\n    rgba(255, 255, 255, 0.08)\n  );\n  border: 1px solid rgba(255, 255, 255, 0.3);\n}\n\n/* Enhanced section transitions with smooth parallax */\n.parallax-premium {\n  will-change: transform;\n  transition: transform 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n/* 3D Image Hover Effect */\n.image-3d-hover {\n  perspective: 1000px;\n  transform-style: preserve-3d;\n  transition: all 0.3s ease;\n}\n\n.image-3d-hover:hover {\n  transform: rotateX(5deg) rotateY(5deg) scale(1.05);\n  box-shadow: \n    0 20px 40px rgba(0, 0, 0, 0.15),\n    0 10px 20px rgba(0, 0, 0, 0.1);\n}\n\n.image-3d-hover:hover .image-3d-content {\n  transform: translateZ(20px);\n}\n\n/* Premium button with smooth shimmer effect */\n.premium-button-shimmer {\n  position: relative;\n  overflow: hidden;\n  transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n.premium-button-shimmer::before {\n  content: '';\n  position: absolute;\n  inset: 0;\n  background: linear-gradient(\n    45deg,\n    transparent,\n    rgba(255, 255, 255, 0.1),\n    transparent\n  );\n  transform: translateX(-100%);\n  transition: transform 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n.premium-button-shimmer:hover::before {\n  transform: translateX(100%);\n}\n\n.premium-button-shimmer:hover {\n  transform: translateY(-2px);\n  box-shadow: \n    0 12px 25px rgba(0, 0, 0, 0.15),\n    0 5px 10px rgba(0, 0, 0, 0.1);\n}\n\n/* CEO Image Styling */\n.ceo-image-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.ceo-image {\n  max-width: 300px;\n  width: 100%;\n  height: auto;\n  object-fit: contain;\n  border-radius: 1.5rem;\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1), 0 8px 16px rgba(0, 0, 0, 0.06);\n  transition: all 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n.ceo-image:hover {\n  transform: rotateY(5deg) rotateX(2deg) scale(1.05);\n  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15), 0 12px 24px rgba(0, 0, 0, 0.1);\n}\n","size_bytes":8727},"client/src/main.tsx":{"content":"import { createRoot } from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":158},"client/src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"server/lib/brevo.ts":{"content":"import axios from 'axios';\nimport { getEmailImages, createEmailTemplate } from './emailImages.js';\n\nif (!process.env.BREVO_API_KEY) {\n  throw new Error(\"BREVO_API_KEY environment variable must be set\");\n}\n\n// Brevo API configuration\nconst BREVO_API_URL = 'https://api.brevo.com/v3/smtp/email';\nconst BREVO_API_KEY = process.env.BREVO_API_KEY!;\n\nexport interface EmailSubmissionParams {\n  name: string;\n  recipient_name: string;\n  email: string;\n  phone: string;\n  type_of_message: string;\n  message_details: string;\n  feelings: string;\n  story: string;\n  specific_details: string;\n  delivery_type: string;\n  submission_id: string;\n}\n\nexport interface EmailReplyParams {\n  client_name: string;\n  reply_message: string;\n  admin_name: string;\n  reply_link?: string;\n  from_email: string;\n  admin_panel_link?: string;\n}\n\nexport async function sendSubmissionEmail(params: EmailSubmissionParams): Promise<boolean> {\n  try {\n    console.log('Starting sendSubmissionEmail with params:', JSON.stringify(params, null, 2));\n    \n    // Get email images\n    const images = getEmailImages();\n    \n    // Format the current date\n    const currentDate = new Date().toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n\n    // Create admin email content with table structure\n    const adminContent = `\n      <tr style=\"background:#fff5f5;\">\n        <td style=\"padding:10px;border-bottom:1px solid #ffd6d6;\">Name</td>\n        <td style=\"padding:10px;border-bottom:1px solid #ffd6d6;\">${params.name}</td>\n      </tr>\n      <tr style=\"background:#fffaf2;\">\n        <td style=\"padding:10px;border-bottom:1px solid #ffe6cc;\">Recipient's Name</td>\n        <td style=\"padding:10px;border-bottom:1px solid #ffe6cc;\">${params.recipient_name}</td>\n      </tr>\n      <tr style=\"background:#fff5f5;\">\n        <td style=\"padding:10px;border-bottom:1px solid #ffd6d6;\">Date</td>\n        <td style=\"padding:10px;border-bottom:1px solid #ffd6d6;\">${currentDate}</td>\n      </tr>\n      <tr style=\"background:#fffaf2;\">\n        <td style=\"padding:10px;border-bottom:1px solid #ffe6cc;\">Status</td>\n        <td style=\"padding:10px;border-bottom:1px solid #ffe6cc;\">New Submission</td>\n      </tr>\n      <tr style=\"background:#fff5f5;\">\n        <td style=\"padding:10px;border-bottom:1px solid #ffd6d6;\">Email Address</td>\n        <td style=\"padding:10px;border-bottom:1px solid #ffd6d6;\"><a href=\"mailto:${params.email}\" style=\"color:#ff6b6b;text-decoration:none;\">${params.email}</a></td>\n      </tr>\n      <tr style=\"background:#fffaf2;\">\n        <td style=\"padding:10px;border-bottom:1px solid #ffe6cc;\">Phone Number</td>\n        <td style=\"padding:10px;border-bottom:1px solid #ffe6cc;\">${params.phone}</td>\n      </tr>\n      <tr style=\"background:#fff5f5;\">\n        <td style=\"padding:10px;border-bottom:1px solid #ffd6d6;\">Type of Message</td>\n        <td style=\"padding:10px;border-bottom:1px solid #ffd6d6;\">${params.type_of_message}</td>\n      </tr>\n      <tr style=\"background:#fffaf2;\">\n        <td style=\"padding:10px;border-bottom:1px solid #ffe6cc;\">Message Details</td>\n        <td style=\"padding:10px;border-bottom:1px solid #ffe6cc;\">${params.message_details}</td>\n      </tr>\n      <tr style=\"background:#fff5f5;\">\n        <td style=\"padding:10px;border-bottom:1px solid #ffd6d6;\">Feelings</td>\n        <td style=\"padding:10px;border-bottom:1px solid #ffd6d6;\">${params.feelings}</td>\n      </tr>\n      <tr style=\"background:#fffaf2;\">\n        <td style=\"padding:10px;border-bottom:1px solid #ffe6cc;\">Story</td>\n        <td style=\"padding:10px;border-bottom:1px solid #ffe6cc;\">${params.story}</td>\n      </tr>\n      <tr style=\"background:#fff5f5;\">\n        <td style=\"padding:10px;border-bottom:1px solid #ffd6d6;\">Specific Details</td>\n        <td style=\"padding:10px;border-bottom:1px solid #ffd6d6;\">${params.specific_details || 'None provided'}</td>\n      </tr>\n      <tr style=\"background:#fffaf2;\">\n        <td style=\"padding:10px;\">Delivery Type</td>\n        <td style=\"padding:10px;\">${params.delivery_type}</td>\n      </tr>\n    `;\n\n    // Create user confirmation content\n    const userContent = `\n      <div style=\"padding: 20px; text-align: center;\">\n        <h3 style=\"color: #ff6b6b; margin-top: 0; font-size: 18px;\">Dear ${params.name},</h3>\n        \n        <p style=\"font-size: 16px; line-height: 1.6; margin: 20px 0;\">\n          Thank you for submitting your heartfelt <strong>${params.type_of_message}</strong> for <strong>${params.recipient_name}</strong>.\n        </p>\n        \n        <div style=\"background: #fff5f7; border: 1px solid #f9ccd3; border-radius: 8px; padding: 20px; margin: 20px 0; text-align: left;\">\n          <h4 style=\"margin-top: 0; color: #ff6b6b;\">Your Submission Details:</h4>\n          <p style=\"margin: 5px 0;\"><strong>Message Type:</strong> ${params.type_of_message}</p>\n          <p style=\"margin: 5px 0;\"><strong>Delivery Type:</strong> ${params.delivery_type}</p>\n          <p style=\"margin: 5px 0;\"><strong>Submission Date:</strong> ${currentDate}</p>\n          <p style=\"margin: 5px 0;\"><strong>Reference ID:</strong> ${params.submission_id}</p>\n        </div>\n        \n        <p style=\"font-size: 16px; line-height: 1.6; margin: 20px 0;\">\n          Our team will begin crafting your personalized message with care and attention. We'll be in touch soon with updates!\n        </p>\n        \n        <p style=\"font-size: 16px; margin-top: 30px; color: #ff6b6b;\">\n          With warm regards,<br><strong>The Written Hug Team</strong>\n        </p>\n      </div>\n    `;\n\n    // Get templates with images\n    const adminTemplate = createEmailTemplate('admin', images);\n    const userTemplate = createEmailTemplate('user', images);\n    \n    const adminHtmlContent = adminTemplate.replace('{NAME}', params.name).replace('{CONTENT}', adminContent);\n    const userHtmlContent = userTemplate.replace('{NAME}', params.name).replace('{CONTENT}', userContent);\n\n    // Create email objects with explicit structure\n    const adminEmail = {\n      \"sender\": {\n        \"email\": \"thewrittenhug@gmail.com\",\n        \"name\": \"The Written Hug System\"\n      },\n      \"to\": [{\n        \"email\": \"thewrittenhug@gmail.com\", \n        \"name\": \"The Written Hug Admin\"\n      }],\n      \"subject\": `New Message from ${params.name}`,\n      \"htmlContent\": adminHtmlContent\n    };\n\n    const userEmail = {\n      \"sender\": {\n        \"email\": \"thewrittenhug@gmail.com\",\n        \"name\": \"The Written Hug Team\"\n      },\n      \"to\": [{\n        \"email\": params.email,\n        \"name\": params.name\n      }],\n      \"subject\": \"Thank you for your message - The Written Hug\",\n      \"htmlContent\": userHtmlContent\n    };\n\n    console.log('Prepared admin email object:', JSON.stringify(adminEmail, null, 2));\n    console.log('Prepared user email object:', JSON.stringify(userEmail, null, 2));\n\n    // Send admin email\n    const adminResponse = await axios.post('https://api.brevo.com/v3/smtp/email', adminEmail, {\n      headers: {\n        'api-key': BREVO_API_KEY,\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    });\n\n    console.log('Admin email response:', adminResponse.status, adminResponse.data);\n\n    // Send user email\n    const userResponse = await axios.post('https://api.brevo.com/v3/smtp/email', userEmail, {\n      headers: {\n        'api-key': BREVO_API_KEY,\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    });\n\n    console.log('User email response:', userResponse.status, userResponse.data);\n    \n    return adminResponse.status === 201 && userResponse.status === 201;\n  } catch (error) {\n    console.error('Email sending failed:', error);\n    if (error instanceof Error && 'response' in error) {\n      const axiosError = error as any;\n      console.error('Response status:', axiosError.response?.status);\n      console.error('Response data:', JSON.stringify(axiosError.response?.data, null, 2));\n    }\n    return false;\n  }\n}\n\nexport async function sendReplyEmail(clientEmail: string, params: EmailReplyParams): Promise<boolean> {\n  try {\n    // Get email images\n    const images = getEmailImages();\n    \n    // Create reply content matching the template design\n    const replyContent = `\n      <p style=\"margin:0 0 14px;font-size:15px;\">\n        Hi ${params.client_name},\n      </p>\n\n      <div style=\"background:#fff5f7;border-radius:8px;padding:16px 18px;border:1px solid #f9ccd3;\">\n        <p style=\"margin:0;font-size:15px;line-height:1.6;text-align:justify;color:#2f2f2f;\">\n          ${params.reply_message.replace(/\\n/g, '<br>')}\n        </p>\n      </div>\n\n      <p style=\"margin:12px 0 0;font-size:15px;\">\n        To continue, simply reply to this email and we'll get back to you.\n      </p>\n\n      <p style=\"margin:12px 0 0;font-size:13px;color:#666;\">\n        This message is a direct reply to the message you sent — no marketing, no promotions.\n      </p>\n    `;\n\n    // Get template with images\n    const replyTemplate = createEmailTemplate('reply', images);\n    const replyHtmlContent = replyTemplate.replace('{CONTENT}', replyContent);\n\n    // Send reply email using direct HTML\n    const replyEmailData = {\n      sender: {\n        email: 'thewrittenhug@gmail.com',\n        name: 'The Written Hug Team'\n      },\n      to: [\n        {\n          email: clientEmail,\n          name: params.client_name\n        }\n      ],\n      subject: `Personal Reply from The Written Hug Team`,\n      htmlContent: replyHtmlContent,\n      replyTo: {\n        email: 'thewrittenhug@gmail.com',\n        name: 'The Written Hug Team'\n      }\n    };\n\n    console.log('Reply email data:', JSON.stringify(replyEmailData, null, 2));\n    \n    const replyResult = await axios.post(BREVO_API_URL, replyEmailData, {\n      headers: {\n        'api-key': BREVO_API_KEY,\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    console.log('Reply email result:', replyResult.status);\n    console.log('Reply email response:', JSON.stringify(replyResult.data, null, 2));\n    \n    return true;\n  } catch (error) {\n    console.error('Brevo reply email error:', error);\n    if (error instanceof Error && 'response' in error) {\n      const axiosError = error as any;\n      console.error('Response status:', axiosError.response?.status);\n      console.error('Response data:', axiosError.response?.data);\n    }\n    return false;\n  }\n}","size_bytes":10355},"server/lib/emailImages.ts":{"content":"// Email images configuration using Cloudinary URLs with optimizations\nfunction createOptimizedCloudinaryUrl(baseUrl: string, width: number = 700): string {\n  // Extract the version and public ID from the Cloudinary URL\n  const match = baseUrl.match(/\\/upload\\/(v\\d+)\\/(.+)\\.(jpg|png|jpeg)$/);\n  if (!match) return baseUrl;\n  \n  const [, version, publicId, extension] = match;\n  const cloudName = 'dwmybitme';\n  \n  // Create optimized URL with transformations\n  return `https://res.cloudinary.com/${cloudName}/image/upload/w_${width},c_scale,q_auto:best,f_auto/${version}/${publicId}.${extension}`;\n}\n\nexport function getEmailImages() {\n  return {\n    // Common footer image for all templates (optimized for email width)\n    footerImage: createOptimizedCloudinaryUrl(\n      'https://res.cloudinary.com/dwmybitme/image/upload/v1755175867/Black_Minimalist_Linkedin_Banner_tmtk7h.png',\n      700\n    ),\n    \n    // Admin response header image (green watercolor)\n    adminHeaderImage: createOptimizedCloudinaryUrl(\n      'https://res.cloudinary.com/dwmybitme/image/upload/v1755175843/Green_Watercolor_Elegant_Wedding_Banner_Landscape_tjpw6a.jpg',\n      700\n    ),\n    \n    // User response header image (pink and white floral)\n    userHeaderImage: createOptimizedCloudinaryUrl(\n      'https://res.cloudinary.com/dwmybitme/image/upload/v1755175842/Pink_and_White_Floral_Wedding_Banner_5_gqw6u8.jpg',\n      700\n    ),\n    \n    // Reply header image (pink and white floral for orders)\n    replyHeaderImage: createOptimizedCloudinaryUrl(\n      'https://res.cloudinary.com/dwmybitme/image/upload/v1755175889/Pink_and_White_Floral_Wedding_Banner_tosxqh.png',\n      700\n    )\n  };\n}\n\n// Common footer for all email templates\nfunction createCommonFooter(footerImageUrl: string): string {\n  return `\n    <!-- Common Footer -->\n    <div style=\"width:100%;max-width:700px;margin:20px auto 0;padding:0 12px;text-align:center;box-sizing:border-box;\">\n      <img src=\"${footerImageUrl}\" alt=\"The Written Hug Footer\" style=\"width:100%;height:auto;display:block;\" />\n    </div>\n\n    <div style=\"padding:12px 18px 20px 18px;text-align:center;font-size:12px;color:#666666;\">\n      <div>You are receiving this message because you or someone associated with this email interacted with The Written Hug.</div>\n    </div>\n  `;\n}\n\n// Create email templates matching the provided designs\nexport function createEmailTemplate(type: 'admin' | 'user' | 'reply', images: ReturnType<typeof getEmailImages>) {\n  \n  // Admin email template (for new submissions)\n  if (type === 'admin') {\n    return `\n      <!doctype html>\n      <html lang=\"en\">\n        <head>\n          <meta charset=\"utf-8\" />\n          <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n          <title>The Written Hug — You've got a letter</title>\n        </head>\n        <body style=\"margin:0;padding:0;background:#ffffff;font-family:Arial, sans-serif;color:#333333;\">\n\n          <!-- Preheader -->\n          <div style=\"display:none!important;visibility:hidden;opacity:0;color:transparent;height:0;width:0;overflow:hidden;mso-hide:all;\">\n            You've received a new message via The Written Hug. Open to view details.\n          </div>\n\n          <!-- Header Image -->\n          <div style=\"width:100%;max-width:700px;margin:0 auto;padding:0 12px;text-align:center;box-sizing:border-box;\">\n            <img src=\"${images.adminHeaderImage}\" alt=\"The Written Hug\" style=\"width:100%;height:auto;display:block;\" />\n          </div>\n\n          <div style=\"width:100%;padding:20px 12px;box-sizing:border-box;\">\n            <div style=\"width:100%;max-width:700px;margin:0 auto;border-radius:8px;overflow:hidden;border:1px solid #f0e6e6;background:#fff;\">\n\n              <!-- Title -->\n              <h2 style=\"color:#ff6b6b;text-align:center;margin:18px 20px;font-size:20px;line-height:1.2;\">\n                The Written Hug has got a Letter from {NAME}\n              </h2>\n\n              <!-- Table -->\n              <div style=\"display:flex;justify-content:center;padding:0 18px 18px 18px;\">\n                <table style=\"width:100%;max-width:700px;border-collapse:collapse;\">\n                  <thead>\n                    <tr>\n                      <th colspan=\"2\" style=\"background:linear-gradient(90deg,#ff6b6b,#ff9f43);color:#ffffff;\">\n                        <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" style=\"border-collapse:collapse;\">\n                          <tr>\n                            <td style=\"padding:12px;font-size:14px;text-align:center;font-weight:700;\">Field</td>\n                            <td style=\"padding:12px;font-size:14px;text-align:center;font-weight:700;\">Value</td>\n                          </tr>\n                        </table>\n                      </th>\n                    </tr>\n                  </thead>\n\n                  <tbody>\n                    {CONTENT}\n                  </tbody>\n                </table>\n              </div>\n\n            </div>\n          </div>\n\n          ${createCommonFooter(images.footerImage)}\n\n        </body>\n      </html>\n    `;\n  }\n\n  // User confirmation email template\n  if (type === 'user') {\n    return `\n      <!doctype html>\n      <html lang=\"en\">\n        <head>\n          <meta charset=\"utf-8\" />\n          <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n          <title>The Written Hug — You've got a letter</title>\n        </head>\n        <body style=\"margin:0;padding:0;background:#ffffff;font-family:Arial, sans-serif;color:#333333;\">\n\n          <!-- Preheader -->\n          <div style=\"display:none!important;visibility:hidden;opacity:0;color:transparent;height:0;width:0;overflow:hidden;mso-hide:all;\">\n            Thank you for your message submission to The Written Hug.\n          </div>\n\n          <!-- Header Image -->\n          <div style=\"width:100%;max-width:700px;margin:0 auto;padding:0 12px;text-align:center;box-sizing:border-box;\">\n            <img src=\"${images.userHeaderImage}\" alt=\"Thank You\" style=\"width:100%;height:auto;display:block;\" />\n          </div>\n\n          <div style=\"width:100%;padding:20px 12px;box-sizing:border-box;\">\n            <div style=\"width:100%;max-width:700px;margin:0 auto;border-radius:8px;overflow:hidden;border:1px solid #f0e6e6;background:#fff;\">\n\n              <!-- Title -->\n              <h2 style=\"color:#ff6b6b;text-align:center;margin:18px 20px;font-size:20px;line-height:1.2;\">\n                The Written Hug has got {NAME} a Letter\n              </h2>\n\n              <!-- Content -->\n              <div style=\"padding:0 18px 18px 18px;\">\n                {CONTENT}\n              </div>\n\n            </div>\n          </div>\n\n          ${createCommonFooter(images.footerImage)}\n\n        </body>\n      </html>\n    `;\n  }\n\n  // Reply email template (for admin responses)\n  return `\n    <!doctype html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"utf-8\" />\n      <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n      <title>The Written Hug — Personal reply</title>\n\n      <!-- Optional: most email clients ignore external fonts, but this won't trigger spam filters. -->\n      <link href=\"https://fonts.googleapis.com/css2?family=Great+Vibes&display=swap\" rel=\"stylesheet\">\n    </head>\n\n    <body style=\"margin:0;padding:0;background:#f8f7f6;font-family: 'Comic Sans MS', ComicSans, cursive, Arial, sans-serif; color:#333333;\">\n\n      <!-- Hidden preview / preheader -->\n      <div style=\"display:none!important;visibility:hidden;opacity:0;height:0;width:0;overflow:hidden;mso-hide:all;\">\n        A personal reply to your message from The Written Hug — reply to continue.\n      </div>\n\n      <!-- Header Image -->\n      <div style=\"width:100%;max-width:700px;margin:0 auto;padding:24px 12px 0;text-align:center;box-sizing:border-box;\">\n        <img src=\"${images.replyHeaderImage}\" alt=\"Personal Reply\" style=\"width:100%;height:auto;display:block;border-radius:10px 10px 0 0;\" />\n      </div>\n\n      <div role=\"article\" aria-label=\"The Written Hug reply\" style=\"padding:0 12px 24px;\">\n        <div style=\"max-width:700px;margin:0 auto;background:#ffffff;border-radius:0 0 10px 10px;overflow:hidden;box-shadow:0 6px 18px rgba(0,0,0,0.06);\">\n\n          <!-- Header -->\n          <div style=\"padding:22px 20px;text-align:center;background:linear-gradient(90deg,#f16a85,#f78c9e,#f16a85);color:#ffffff;\">\n            <h1 style=\"margin:0;font-size:28px;font-family:'Great Vibes', 'Comic Sans MS', cursive;line-height:1.2;letter-spacing:0.5px;\">\n              You've Got a Written Hug\n            </h1>\n            <p style=\"margin:6px 0 0;font-size:14px;opacity:0.95;font-family:'Comic Sans MS', cursive, Arial, sans-serif;\">\n              A personal reply to your heartfelt message\n            </p>\n          </div>\n\n          <!-- Body -->\n          <div style=\"padding:20px 24px;background:#ffffff;\">\n            {CONTENT}\n          </div>\n\n          <!-- Footer -->\n          <div style=\"padding:14px 24px 22px;background:#ffffff;border-top:1px solid #f6dede;text-align:center;font-size:12px;color:#777;\">\n            <div style=\"margin-bottom:8px;\">\n              <span style=\"font-weight:600;font-size:16px;color:#f16a85;font-family:'Great Vibes', 'Comic Sans MS', cursive;line-height:1.2;letter-spacing:0.5px;\">Sending smiles with The Written Hug</span>\n            </div>\n          </div>\n\n        </div>\n      </div>\n\n      ${createCommonFooter(images.footerImage)}\n\n    </body>\n    </html>\n  `;\n}","size_bytes":9466},"server/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\nif (!process.env.SUPABASE_SERVICE_ROLE_KEY) {\n  throw new Error(\"SUPABASE_SERVICE_ROLE_KEY environment variable must be set\");\n}\n\n// Server-side client with service role key for admin operations\nexport const supabaseAdmin = createClient(\n  'https://mcjvcjemyvwgrmiotihq.supabase.co',\n  process.env.SUPABASE_SERVICE_ROLE_KEY\n);\n\n// Client-side config (for frontend)\nexport const supabaseConfig = {\n  url: 'https://mcjvcjemyvwgrmiotihq.supabase.co',\n  anonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '',\n};","size_bytes":565},"client/src/components/CEOSection.tsx":{"content":"\nimport React from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Heart, Star, Sparkles } from 'lucide-react';\n\nconst CEOSection = () => {\n  return (\n    <section className=\"py-32 px-6 bg-gradient-to-b from-background to-pink-50/20 relative overflow-hidden\">\n      {/* Background Decorations */}\n      <div className=\"absolute top-10 left-10 animate-float\">\n        <Sparkles className=\"w-8 h-8 text-yellow-300 opacity-20\" />\n      </div>\n      <div className=\"absolute top-20 right-20 animate-float delay-1000\">\n        <Star className=\"w-6 h-6 text-pink-300 opacity-30 fill-current\" />\n      </div>\n      <div className=\"absolute bottom-20 left-1/4 animate-float delay-2000\">\n        <Heart className=\"w-8 h-8 text-purple-300 opacity-20 fill-current\" />\n      </div>\n      <div className=\"absolute bottom-32 right-16 animate-pulse\">\n        <div className=\"w-12 h-12 bg-gradient-to-r from-pink-200 to-purple-200 rounded-full opacity-10\"></div>\n      </div>\n      \n      <div className=\"max-w-6xl mx-auto relative z-10\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-5xl md:text-6xl font-bold mb-8\">\n            Meet Our CEO:\n            <br />\n            <span className=\"bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent\">\n              Chief Emotions Officer\n            </span>\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            The heart and soul behind every beautifully crafted message\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n          <div className=\"relative flex justify-center lg:justify-end\">\n            <div className=\"ceo-image-container image-3d-hover\">\n              <img\n                src=\"/lovable-uploads/a880aac8-c4eb-4120-8183-ea6411dd5725.png\"\n                alt=\"Onaamika Sadguru\"\n                className=\"ceo-image image-3d-content\"\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-8\">\n            <div className=\"relative\">\n              <h3 className=\"text-4xl font-bold mb-6 bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent\">\n                Onaamika Sadguru\n              </h3>\n            </div>\n            \n            <div className=\"space-y-6 text-muted-foreground leading-relaxed\">\n              <p className=\"text-lg\">\n                A wordsmith with a heart that feels deeply and a pen that bleeds emotion. \n                Onaamika doesn't just write letters—she weaves souls into sentences and \n                transforms silent hearts into singing words.\n              </p>\n              \n              <p className=\"text-lg\">\n                With an uncanny ability to capture the essence of human connection, she has \n                dedicated her life to giving voice to the voiceless emotions that live in the \n                space between heartbeats.\n              </p>\n              \n              <p className=\"text-lg font-medium text-primary times-new-roman-italic\">\n                \"Every emotion deserves to be heard, every feeling deserves to find its way \n                to the heart it's meant for.\"\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-6 mt-8\">\n              <Card className=\"group hover:shadow-lg transition-all duration-300 border-0 bg-gradient-to-br from-pink-50/30 to-purple-50/30 rounded-2xl\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-12 h-12 mx-auto mb-4 bg-gradient-to-r from-pink-400 to-purple-400 rounded-full flex items-center justify-center\">\n                    <Heart className=\"w-6 h-6 text-white fill-current\" />\n                  </div>\n                  <h4 className=\"text-lg font-semibold mb-2\">Endless</h4>\n                  <p className=\"text-sm text-muted-foreground\">Love & Passion</p>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"group hover:shadow-lg transition-all duration-300 border-0 bg-gradient-to-br from-yellow-50/30 to-orange-50/30 rounded-2xl\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-12 h-12 mx-auto mb-4 bg-gradient-to-r from-yellow-400 to-orange-400 rounded-full flex items-center justify-center\">\n                    <Sparkles className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <h4 className=\"text-lg font-semibold mb-2\">Pure</h4>\n                  <p className=\"text-sm text-muted-foreground\">Magic & Wonder</p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default CEOSection;\n","size_bytes":4777},"client/src/components/ContactForm.tsx":{"content":"import React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { Heart, Send } from 'lucide-react';\n\ninterface FormData {\n  name: string;\n  email: string;\n  phone: string;\n  recipientName: string;\n  serviceType: string;\n  deliveryType: string;\n  feelings: string;\n  story: string;\n  specificDetails: string;\n}\n\nconst ContactForm = () => {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState<FormData>({\n    name: '',\n    email: '',\n    phone: '',\n    recipientName: '',\n    serviceType: '',\n    deliveryType: '',\n    feelings: '',\n    story: '',\n    specificDetails: ''\n  });\n\n  const handleInputChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>\n  ) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    try {\n      const response = await fetch(\"/api/submitHug\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(formData)\n      });\n\n      const result = await response.json();\n\n      if (result.success) {\n        toast({\n          title: \"Message Sent! ❤️\",\n          description: \"Thank you for sharing your story. We'll reach out within 24 hours.\"\n        });\n\n        // reset form\n        setFormData({\n          name: '',\n          email: '',\n          phone: '',\n          recipientName: '',\n          serviceType: '',\n          deliveryType: '',\n          feelings: '',\n          story: '',\n          specificDetails: ''\n        });\n      } else {\n        toast({\n          title: \"Failed to Send\",\n          description: result.message || \"Please try again later.\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Network Error\",\n        description: \"Please check your connection.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const serviceTypes = [\n    'Love Letter', 'Gratitude Message', 'Apology Letter',\n    'Birthday Message', 'Anniversary Letter', 'Thank You Note',\n    'Friendship Letter', 'Family Message', 'Custom Request'\n  ];\n\n  return (\n    <Card className=\"max-w-4xl mx-auto shadow-2xl border-0 bg-gradient-to-br from-background to-muted/30\">\n      <CardHeader className=\"text-center pb-8\">\n        <CardTitle className=\"text-3xl font-bold flex items-center justify-center gap-3\">\n          <Heart className=\"h-8 w-8 text-primary\" />\n          Share Your Heart\n        </CardTitle>\n        <p className=\"text-muted-foreground mt-2\">\n          Tell us your story, and we'll help you express it beautifully\n        </p>\n      </CardHeader>\n\n      <CardContent className=\"p-8\">\n        <form onSubmit={handleSubmit} className=\"space-y-8\">\n          {/* No action or method attributes here */}\n\n          <div className=\"space-y-6\">\n            <h3 className=\"text-xl font-semibold text-primary\">Personal Information</h3>\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div className=\"space-y-2\">\n                <Label>Your Name *</Label>\n                <Input name=\"name\" required value={formData.name} onChange={handleInputChange} />\n              </div>\n              <div className=\"space-y-2\">\n                <Label>Email Address *</Label>\n                <Input name=\"email\" type=\"email\" required value={formData.email} onChange={handleInputChange} />\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label>Phone Number *</Label>\n              <Input name=\"phone\" type=\"tel\" required value={formData.phone} onChange={handleInputChange} />\n            </div>\n          </div>\n\n          <div className=\"space-y-6\">\n            <h3 className=\"text-xl font-semibold text-primary\">Message Details</h3>\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div className=\"space-y-2\">\n                <Label>Recipient's Name *</Label>\n                <Input name=\"recipientName\" required value={formData.recipientName} onChange={handleInputChange} />\n              </div>\n              <div className=\"space-y-2\">\n                <Label>Type of Message *</Label>\n                <select\n                  name=\"serviceType\"\n                  required\n                  value={formData.serviceType}\n                  onChange={handleInputChange}\n                  className=\"w-full h-12 px-3 py-2 border border-input bg-background rounded-md text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\"\n                >\n                  <option value=\"\">Select type</option>\n                  {serviceTypes.map(type => <option key={type}>{type}</option>)}\n                </select>\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label>Delivery Type *</Label>\n              <select\n                name=\"deliveryType\"\n                required\n                value={formData.deliveryType}\n                onChange={handleInputChange}\n                className=\"w-full h-12 px-3 py-2 border border-input bg-background rounded-md text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\"\n              >\n                <option value=\"\">Select delivery type</option>\n                <option value=\"Standard Delivery\">Standard Delivery (10 days after dispatch)</option>\n                <option value=\"Express Delivery\">Express Delivery (2-3 days after dispatch) - ₹150 extra</option>\n              </select>\n            </div>\n          </div>\n\n          <div className=\"space-y-6\">\n            <h3 className=\"text-xl font-semibold text-primary\">Your Story</h3>\n            <div className=\"space-y-2\">\n              <Label>Feelings *</Label>\n              <Textarea name=\"feelings\" required value={formData.feelings} onChange={handleInputChange} />\n            </div>\n            <div className=\"space-y-2\">\n              <Label>Story *</Label>\n              <Textarea name=\"story\" required value={formData.story} onChange={handleInputChange} />\n            </div>\n            <div className=\"space-y-2\">\n              <Label>Specific Details</Label>\n              <Textarea name=\"specificDetails\" value={formData.specificDetails} onChange={handleInputChange} />\n            </div>\n          </div>\n\n          <div className=\"p-6 bg-muted/50 rounded-lg\">\n            <h4 className=\"font-semibold mb-2 text-primary\">Delivery Information</h4>\n            <p className=\"text-sm text-muted-foreground\">\n              • Delivery all over India<br />\n              • Timeline: 10-15 days<br />\n              • Contact: onaamikasadguru@gmail.com\n            </p>\n          </div>\n\n          <Button type=\"submit\" className=\"w-full h-14 text-lg bg-gradient-to-r from-primary to-purple-600\">\n            <div className=\"flex items-center gap-3\">\n              <Send className=\"h-5 w-5\" />\n              Send My Story\n            </div>\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ContactForm;\n","size_bytes":7520},"client/src/components/FAQSection.tsx":{"content":"\nimport React from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Plus, Minus } from 'lucide-react';\nimport { useState } from 'react';\n\nconst FAQSection = () => {\n  const [openItems, setOpenItems] = useState<number[]>([]);\n\n  const toggleItem = (index: number) => {\n    setOpenItems(prev => \n      prev.includes(index) \n        ? prev.filter(i => i !== index)\n        : [...prev, index]\n    );\n  };\n\n  const faqs = [\n    {\n      question: \"Who writes the messages?\",\n      answer: \"A team led by Onaamika Sadguru — our Chief Emotions Officer — carefully crafts every message with love and authenticity.\"\n    },\n    {\n      question: \"Can I review the message before it's sent?\",\n      answer: \"Absolutely. You'll receive a draft to review, and we'll make changes until it feels just right.\"\n    },\n    {\n      question: \"Can I stay anonymous?\",\n      answer: \"Yes. If you wish, we can deliver the message without revealing your name.\"\n    },\n    {\n      question: \"How long does it take to receive the message?\",\n      answer: \"Standard delivery is within 10–15 days. We take time to get every word just right.\"\n    },\n    {\n      question: \"Can I send messages for any occasion?\",\n      answer: \"Yes! Whether it's love, apology, celebration, or just because — we help you say it from the heart.\"\n    },\n    {\n      question: \"Is this service available outside India?\",\n      answer: \"Currently, we serve all corners of India. International delivery coming soon!\"\n    }\n  ];\n\n  return (\n    <section className=\"py-32 px-6 bg-gradient-to-b from-background to-muted/20 relative overflow-hidden\">\n      <div className=\"max-w-4xl mx-auto relative z-10\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-5xl md:text-6xl font-bold mb-8\">\n            <span className=\"bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent\">\n              You Might Be Wondering…\n            </span>\n          </h2>\n        </div>\n\n        <div className=\"space-y-4\">\n          {faqs.map((faq, index) => (\n            <Card key={index} className=\"border-0 bg-gradient-to-br from-background to-muted/30 hover:shadow-lg transition-all duration-300\">\n              <CardContent className=\"p-0\">\n                <button\n                  onClick={() => toggleItem(index)}\n                  className=\"w-full p-6 text-left flex justify-between items-center hover:bg-muted/20 transition-colors duration-200\"\n                >\n                  <h3 className=\"text-lg font-semibold pr-4\">{faq.question}</h3>\n                  {openItems.includes(index) ? (\n                    <Minus className=\"h-5 w-5 text-primary flex-shrink-0\" />\n                  ) : (\n                    <Plus className=\"h-5 w-5 text-primary flex-shrink-0\" />\n                  )}\n                </button>\n                {openItems.includes(index) && (\n                  <div className=\"px-6 pb-6\">\n                    <p className=\"text-muted-foreground leading-relaxed\">{faq.answer}</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default FAQSection;\n","size_bytes":3203},"client/src/components/ServiceCard.tsx":{"content":"\nimport React from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\n\ninterface ServiceCardProps {\n  title: string;\n  description: string;\n  image: string;\n  price: string;\n  note?: string;\n}\n\nconst ServiceCard: React.FC<ServiceCardProps> = ({ title, description, image, price, note }) => {\n  return (\n    <Card className=\"group overflow-hidden border-0 bg-gradient-to-br from-background to-muted/20 card-hover-smooth hover:shadow-2xl transition-all duration-700\">\n      <div className=\"relative h-48 overflow-hidden\">\n        <img\n          src={image}\n          alt={title}\n          className=\"w-full h-full object-cover transition-transform duration-700 group-hover:scale-110\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent opacity-70 group-hover:opacity-90 transition-opacity duration-500\" />\n        <div className=\"absolute bottom-4 left-4 text-white font-semibold text-lg\">\n          {price}\n        </div>\n      </div>\n      \n      <CardContent className=\"p-8 text-center\">\n        <h3 className=\"text-2xl font-semibold mb-4 transition-all duration-700 group-hover:bg-gradient-to-r group-hover:from-primary group-hover:via-purple-600 group-hover:to-pink-600 group-hover:bg-clip-text group-hover:text-transparent\">\n          {title}\n        </h3>\n        <p className=\"text-muted-foreground leading-relaxed text-center mb-4\">\n          {description}\n        </p>\n        {note && (\n          <p className=\"text-xs text-muted-foreground/80 italic\">\n            {note}\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ServiceCard;\n","size_bytes":1652},"client/src/components/StillNotSureSection.tsx":{"content":"\nimport React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Heart, ArrowRight } from 'lucide-react';\n\nconst StillNotSureSection = () => {\n  const scrollToContact = () => {\n    const contactSection = document.getElementById('contact');\n    if (contactSection) {\n      contactSection.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <section className=\"py-24 px-6 bg-gradient-to-b from-pink-50/20 to-purple-50/20 relative overflow-hidden\">\n      <div className=\"max-w-3xl mx-auto text-center relative z-10\">\n        <div className=\"mb-12\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-8\">\n            <span className=\"bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent\">\n              Still Not Sure What to Say?\n            </span>\n          </h2>\n        </div>\n\n        <div className=\"bg-gradient-to-r from-pink-50/50 to-purple-50/50 p-8 rounded-3xl border border-pink-200/30 mb-8\">\n          <div className=\"flex items-center justify-center mb-6\">\n            <Heart className=\"w-8 h-8 text-primary\" />\n          </div>\n          \n          <p className=\"text-xl leading-relaxed text-muted-foreground mb-6\">\n            You don't need to have the perfect words — just the feeling.\n          </p>\n          \n          <p className=\"text-lg text-foreground times-new-roman-italic\">\n            We'll listen, feel with you, and turn your emotions into the message you've always wanted to say.\n          </p>\n        </div>\n\n        <Button \n          onClick={scrollToContact}\n          size=\"lg\" \n          className=\"bg-gradient-to-r from-primary to-purple-600 text-white px-8 py-4 text-lg group hover:scale-105 hover:shadow-2xl transition-all duration-300\"\n        >\n          Let's Start Your Message\n          <ArrowRight className=\"ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform\" />\n        </Button>\n      </div>\n    </section>\n  );\n};\n\nexport default StillNotSureSection;\n","size_bytes":1976},"client/src/components/TestimonialCard.tsx":{"content":"\nimport React from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Star } from 'lucide-react';\n\ninterface TestimonialCardProps {\n  name: string;\n  location: string;\n  message: string;\n  rating: number;\n}\n\nconst TestimonialCard: React.FC<TestimonialCardProps> = ({ name, location, message, rating }) => {\n  return (\n    <Card className=\"group hover:shadow-2xl transition-all duration-500 border-0 bg-gradient-to-br from-background to-muted/30 hover:-translate-y-1\">\n      <CardContent className=\"p-8\">\n        <div className=\"flex items-center mb-4\">\n          {[...Array(rating)].map((_, i) => (\n            <Star key={i} className=\"h-5 w-5 fill-yellow-400 text-yellow-400\" />\n          ))}\n        </div>\n        \n        <blockquote className=\"text-lg mb-6 leading-relaxed text-muted-foreground italic\">\n          \"{message}\"\n        </blockquote>\n        \n        <div className=\"flex items-center\">\n          <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-purple-600 rounded-full flex items-center justify-center text-white font-semibold text-lg\">\n            {name.charAt(0)}\n          </div>\n          <div className=\"ml-4\">\n            <div className=\"font-semibold text-foreground\">{name}</div>\n            <div className=\"text-sm text-muted-foreground\">{location}</div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default TestimonialCard;\n","size_bytes":1425},"client/src/components/TypingAnimation.tsx":{"content":"\nimport React, { useState, useEffect } from 'react';\n\ninterface TypingAnimationProps {\n  text: string;\n  speed?: number;\n  className?: string;\n}\n\nconst TypingAnimation: React.FC<TypingAnimationProps> = ({ \n  text, \n  speed = 50, \n  className = \"\" \n}) => {\n  const [displayedText, setDisplayedText] = useState(\"\");\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  useEffect(() => {\n    if (currentIndex < text.length) {\n      const timer = setTimeout(() => {\n        setDisplayedText(prev => prev + text[currentIndex]);\n        setCurrentIndex(prev => prev + 1);\n      }, speed);\n\n      return () => clearTimeout(timer);\n    }\n  }, [currentIndex, text, speed]);\n\n  return (\n    <span className={className}>\n      {displayedText}\n      {currentIndex < text.length && (\n        <span className=\"animate-pulse text-primary\">|</span>\n      )}\n    </span>\n  );\n};\n\nexport default TypingAnimation;\n","size_bytes":900},"client/src/components/WhyWeExistSection.tsx":{"content":"\nimport React from 'react';\nimport { Heart, Link, Sparkles } from 'lucide-react';\n\nconst WhyWeExistSection = () => {\n  return (\n    <section className=\"py-32 px-6 bg-gradient-to-b from-muted/20 to-pink-50/20 relative overflow-hidden\">\n      <div className=\"max-w-4xl mx-auto relative z-10 text-center\">\n        <div className=\"mb-16\">\n          <h2 className=\"text-5xl md:text-6xl font-bold mb-8\">\n            <span className=\"bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent\">\n              Why We Exist\n            </span>\n          </h2>\n        </div>\n\n        <div className=\"space-y-8 text-lg leading-relaxed\">\n          <div className=\"flex items-center justify-center mb-8\">\n            <Heart className=\"w-12 h-12 text-primary\" />\n          </div>\n          \n          <p className=\"text-xl font-medium text-foreground times-new-roman-italic\">\n            We believe emotions deserve to be felt fully, not filtered.\n          </p>\n          \n          <p className=\"text-muted-foreground\">\n            In a world filled with instant replies and short texts, we're here to bring back the power \n            of slow, soulful, handwritten expression.\n          </p>\n          \n          <div className=\"flex items-center justify-center my-12\">\n            <Link className=\"w-8 h-8 text-purple-500\" />\n          </div>\n          \n          <p className=\"text-xl font-medium text-primary times-new-roman-italic\">\n            Every message we craft is a bridge — between hearts, across distances, and beyond words.\n          </p>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default WhyWeExistSection;\n","size_bytes":1646},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = 'https://mcjvcjemyvwgrmiotihq.supabase.co';\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || '';\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);","size_bytes":257},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AdminConversation.tsx":{"content":"import React, { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { Link, useParams, useLocation } from 'wouter';\nimport { ArrowLeft, Send, Calendar, Mail, User, Heart, Phone, Package, Sparkles, MapPin } from 'lucide-react';\nimport backgroundMusic from '@assets/Evare (PenduJatt.Com.Se)-trimmed_1755178220859.mp3';\n\ninterface Hug {\n  id: string;\n  Name: string;\n  'Email Address': string;\n  'Phone Number': number;\n  'Recipient\\'s Name': string;\n  'Type of Message': string;\n  Feelings: string;\n  Story: string;\n  'Specific Details': string;\n  'Delivery Type': string;\n  Date: string;\n  Status: string;\n}\n\ninterface Reply {\n  id: string;\n  created_at: string;\n  sender_type: string;\n  sender_name: string;\n  message: string;\n  email_sent?: boolean;\n  is_read?: boolean;\n  email_message_id?: string;\n}\n\nconst AdminConversation = () => {\n  const { id } = useParams();\n  const [hug, setHug] = useState<Hug | null>(null);\n  const [replies, setReplies] = useState<Reply[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [replyMessage, setReplyMessage] = useState('');\n  const [adminName, setAdminName] = useState('CEO-The Written Hug');\n  const [sending, setSending] = useState(false);\n  const [authenticated, setAuthenticated] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const audioRef = useRef<HTMLAudioElement>(null);\n\n  // Initialize background music and finisher header animation\n  useEffect(() => {\n    // Setup background music\n    const setupBackgroundMusic = () => {\n      if (audioRef.current) {\n        const audio = audioRef.current;\n        audio.volume = 0.18;\n        audio.loop = true;\n        \n        const fadeIn = () => {\n          audio.volume = 0;\n          audio.play().catch(e => console.log('Audio autoplay prevented:', e));\n          \n          const fadeInInterval = setInterval(() => {\n            if (audio.volume < 0.18) {\n              audio.volume = Math.min(audio.volume + 0.01, 0.18);\n            } else {\n              clearInterval(fadeInInterval);\n            }\n          }, 100);\n        };\n\n        const startMusic = () => {\n          fadeIn();\n          document.removeEventListener('click', startMusic);\n        };\n\n        document.addEventListener('click', startMusic, { once: true });\n      }\n    };\n\n    setupBackgroundMusic();\n\n    // Initialize finisher header animation\n    const script = document.createElement('script');\n    script.src = 'https://cdn.jsdelivr.net/npm/finisher-header@1.7.6/dist/finisher-header.es5.min.js';\n    script.onload = () => {\n      if (window.FinisherHeader) {\n        new window.FinisherHeader({\n          \"count\": 100,\n          \"size\": {\n            \"min\": 2,\n            \"max\": 4,\n            \"pulse\": 0.1\n          },\n          \"speed\": {\n            \"x\": {\n              \"min\": 0,\n              \"max\": 0.4\n            },\n            \"y\": {\n              \"min\": 0,\n              \"max\": 0.7\n            }\n          },\n          \"colors\": {\n            \"background\": \"#ffffff\",\n            \"particles\": [\n              \"#d041c5\",\n              \"#42c0f2\",\n              \"#d27e35\",\n              \"#6a13a1\"\n            ]\n          },\n          \"blending\": \"overlay\",\n          \"opacity\": {\n            \"center\": 1,\n            \"edge\": 0\n          },\n          \"skew\": 0,\n          \"shapes\": [\n            \"t\",\n            \"s\"\n          ]\n        });\n      }\n    };\n    document.head.appendChild(script);\n\n    return () => {\n      document.head.removeChild(script);\n    };\n  }, []);\n\n  // Check authentication\n  useEffect(() => {\n    const isLoggedIn = localStorage.getItem('adminLoggedIn');\n    if (isLoggedIn === 'true') {\n      setAuthenticated(true);\n    } else {\n      setLocation('/admin/login');\n    }\n  }, [setLocation]);\n\n  useEffect(() => {\n    if (id) {\n      fetchConversation();\n    }\n  }, [id]);\n\n  const fetchConversation = async () => {\n    try {\n      const response = await fetch(`/api/getConversation?hugid=${id}`);\n      const result = await response.json();\n      \n      if (result.success) {\n        setHug(result.hug);\n        setReplies(result.replies);\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to fetch conversation\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Network Error\",\n        description: \"Failed to connect to server\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const sendReply = async () => {\n    if (!replyMessage.trim() || !id) return;\n\n    setSending(true);\n    try {\n      const response = await fetch('/api/sendReply', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          hugid: id,\n          message: replyMessage,\n          admin_name: adminName,\n        }),\n      });\n\n      const result = await response.json();\n      \n      if (result.success) {\n        // Add the new reply to the UI immediately\n        const newReply: Reply = {\n          id: result.reply.id,\n          created_at: result.reply.created_at,\n          sender_type: 'admin',\n          sender_name: adminName,\n          message: replyMessage,\n          email_sent: true,\n          is_read: true,\n        };\n        setReplies([...replies, newReply]);\n        setReplyMessage('');\n        \n        toast({\n          title: \"Reply Sent\",\n          description: \"Your reply has been sent to the client via email\",\n        });\n      } else {\n        toast({\n          title: \"Error\",\n          description: result.message || \"Failed to send reply\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Network Error\",\n        description: \"Failed to send reply\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setSending(false);\n    }\n  };\n\n  const markAsRead = async (replyId: string) => {\n    try {\n      const response = await fetch('/api/markEmailRead', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          replyId: replyId,\n        }),\n      });\n\n      const result = await response.json();\n      \n      if (result.success) {\n        // Update the reply in the UI\n        setReplies(replies.map(reply => \n          reply.id === replyId ? { ...reply, is_read: true } : reply\n        ));\n      }\n    } catch (error) {\n      console.error('Failed to mark as read:', error);\n    }\n  };\n\n  if (!authenticated) {\n    return null; // Will redirect to login\n  }\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-background overflow-hidden premium-scroll relative flex items-center justify-center\">\n        <div className=\"finisher-header absolute inset-0 w-full h-full\" style={{ zIndex: 0 }}></div>\n        <div className=\"relative z-20 text-lg\">Loading conversation...</div>\n      </div>\n    );\n  }\n\n  if (!hug) {\n    return (\n      <div className=\"min-h-screen bg-background overflow-hidden premium-scroll relative flex items-center justify-center\">\n        <div className=\"finisher-header absolute inset-0 w-full h-full\" style={{ zIndex: 0 }}></div>\n        <div className=\"relative z-20 text-lg\">Conversation not found</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background overflow-hidden premium-scroll relative\">\n      {/* Background Music */}\n      <audio ref={audioRef} preload=\"auto\">\n        <source src={backgroundMusic} type=\"audio/mpeg\" />\n      </audio>\n      \n      {/* Animated Background Header */}\n      <div className=\"finisher-header absolute inset-0 w-full h-full\" style={{ zIndex: 0 }}></div>\n      \n      {/* Enhanced Floating Elements */}\n      <div className=\"absolute inset-0 pointer-events-none overflow-hidden z-10\">\n        <div className=\"absolute top-32 left-16 animate-float opacity-15\">\n          <Heart className=\"w-6 h-6 text-pink-300 fill-current\" />\n        </div>\n        <div className=\"absolute top-96 right-20 animate-float delay-1000 opacity-20\">\n          <Heart className=\"w-4 h-4 text-rose-300 fill-current\" />\n        </div>\n        <div className=\"absolute top-[400px] left-1/4 animate-float delay-2000 opacity-25\">\n          <Sparkles className=\"w-5 h-5 text-purple-300\" />\n        </div>\n        <div className=\"absolute top-[600px] right-1/3 animate-float delay-3000 opacity-20\">\n          <MapPin className=\"w-4 h-4 text-indigo-300\" />\n        </div>\n        <div className=\"absolute top-[800px] left-1/3 animate-float delay-4000 opacity-15\">\n          <Mail className=\"w-5 h-5 text-blue-300\" />\n        </div>\n      </div>\n\n      <div className=\"relative z-20 p-6\">\n      <div className=\"max-w-5xl mx-auto\">\n        <div className=\"flex items-center gap-4 mb-8\">\n          <Link href=\"/admin/orders\">\n            <Button variant=\"outline\" size=\"sm\" className=\"border-rose-200/50 backdrop-blur-sm hover:bg-rose-50/80 rounded-full\" data-testid=\"link-back-orders\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Orders\n            </Button>\n          </Link>\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-br from-rose-400 to-pink-600 rounded-full flex items-center justify-center shadow-lg\">\n              <Heart className=\"h-5 w-5 text-white\" />\n            </div>\n            <h1 className=\"text-3xl font-bold great-vibes-font bg-gradient-to-r from-rose-600 to-pink-600 bg-clip-text text-transparent\">\n              Conversation with {hug.Name}\n            </h1>\n          </div>\n        </div>\n\n        {/* Order Details Card */}\n        <Card className=\"mb-8 border-rose-200/30 bg-white/95 backdrop-blur-md shadow-xl\">\n          <CardHeader className=\"bg-gradient-to-r from-rose-100/50 to-pink-100/50 border-b border-rose-200/30 backdrop-blur-sm\">\n            <CardTitle className=\"flex items-center gap-2 text-rose-800\">\n              <Heart className=\"h-5 w-5 text-rose-600\" />\n              Order Details\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <div className=\"grid md:grid-cols-3 gap-6 mb-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-3 p-3 bg-rose-50/80 backdrop-blur-sm rounded-lg border border-rose-200/30\">\n                  <User className=\"h-5 w-5 text-rose-600\" />\n                  <div>\n                    <Label className=\"text-sm font-medium text-rose-700\">Client Name</Label>\n                    <p className=\"font-semibold text-gray-900\" data-testid=\"text-client-name\">{hug.Name}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3 p-3 bg-rose-50 rounded-lg\">\n                  <Mail className=\"h-5 w-5 text-rose-600\" />\n                  <div>\n                    <Label className=\"text-sm font-medium text-rose-700\">Email</Label>\n                    <p className=\"text-gray-900\">{hug['Email Address']}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3 p-3 bg-rose-50 rounded-lg\">\n                  <Phone className=\"h-5 w-5 text-rose-600\" />\n                  <div>\n                    <Label className=\"text-sm font-medium text-rose-700\">Phone</Label>\n                    <p className=\"text-gray-900\">{hug['Phone Number']}</p>\n                  </div>\n                </div>\n              </div>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-3 p-3 bg-pink-50 rounded-lg\">\n                  <Heart className=\"h-5 w-5 text-pink-600\" />\n                  <div>\n                    <Label className=\"text-sm font-medium text-pink-700\">Recipient</Label>\n                    <p className=\"font-semibold text-gray-900\">{hug['Recipient\\'s Name']}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3 p-3 bg-pink-50 rounded-lg\">\n                  <Package className=\"h-5 w-5 text-pink-600\" />\n                  <div>\n                    <Label className=\"text-sm font-medium text-pink-700\">Message Type</Label>\n                    <p className=\"text-gray-900\">{hug['Type of Message']}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3 p-3 bg-pink-50 rounded-lg\">\n                  <Package className=\"h-5 w-5 text-pink-600\" />\n                  <div>\n                    <Label className=\"text-sm font-medium text-pink-700\">Delivery Type</Label>\n                    <p className=\"text-gray-900\">{hug['Delivery Type']}</p>\n                  </div>\n                </div>\n              </div>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-3 p-3 bg-purple-50 rounded-lg\">\n                  <Calendar className=\"h-5 w-5 text-purple-600\" />\n                  <div>\n                    <Label className=\"text-sm font-medium text-purple-700\">Date Submitted</Label>\n                    <p className=\"text-gray-900\">{new Date(hug.Date).toLocaleDateString('en-US', {\n                      year: 'numeric',\n                      month: 'long',\n                      day: 'numeric'\n                    })}</p>\n                  </div>\n                </div>\n                <div className=\"p-3 bg-purple-50 rounded-lg\">\n                  <Label className=\"text-sm font-medium text-purple-700\">Status</Label>\n                  <div className=\"mt-2\">\n                    <Badge \n                      variant={hug.Status === 'New' ? 'default' : 'secondary'}\n                      className={hug.Status === 'New' ? 'bg-emerald-100 text-emerald-800' : 'bg-rose-100 text-rose-800'}\n                    >\n                      {hug.Status}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div className=\"p-4 bg-gradient-to-r from-rose-50 to-pink-50 rounded-lg border border-rose-200\">\n                <Label className=\"text-sm font-medium text-rose-700 mb-2 block\">Feelings</Label>\n                <p className=\"text-gray-800 leading-relaxed\">{hug.Feelings}</p>\n              </div>\n              <div className=\"p-4 bg-gradient-to-r from-pink-50 to-purple-50 rounded-lg border border-pink-200\">\n                <Label className=\"text-sm font-medium text-pink-700 mb-2 block\">Story</Label>\n                <p className=\"text-gray-800 leading-relaxed\">{hug.Story}</p>\n              </div>\n              {hug['Specific Details'] && (\n                <div className=\"p-4 bg-gradient-to-r from-purple-50 to-indigo-50 rounded-lg border border-purple-200\">\n                  <Label className=\"text-sm font-medium text-purple-700 mb-2 block\">Specific Details</Label>\n                  <p className=\"text-gray-800 leading-relaxed\">{hug['Specific Details']}</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Conversation Thread */}\n        <Card className=\"mb-6 border-rose-200 shadow-lg\">\n          <CardHeader className=\"bg-gradient-to-r from-rose-100 to-pink-100 border-b border-rose-200\">\n            <CardTitle className=\"text-rose-800\">Conversation History</CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n              {replies.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <Heart className=\"h-12 w-12 text-rose-300 mx-auto mb-4\" />\n                  <p className=\"text-rose-500 text-lg\">No replies yet</p>\n                  <p className=\"text-rose-400 text-sm\">Start the conversation with your client!</p>\n                </div>\n              ) : (\n                replies.map((reply) => (\n                  <div\n                    key={reply.id}\n                    className={`flex ${reply.sender_type === 'admin' ? 'justify-end' : 'justify-start'}`}\n                  >\n                    <div\n                      className={`max-w-xs lg:max-w-md px-4 py-3 rounded-lg shadow-sm relative ${\n                        reply.sender_type === 'admin'\n                          ? 'bg-gradient-to-r from-rose-500 to-pink-600 text-white'\n                          : reply.is_read === false\n                          ? 'bg-gradient-to-r from-blue-50 to-blue-100 text-gray-800 border-2 border-blue-300 cursor-pointer hover:from-blue-100 hover:to-blue-150'\n                          : 'bg-gradient-to-r from-gray-100 to-gray-200 text-gray-800 border border-gray-300'\n                      }`}\n                      onClick={() => {\n                        if (reply.sender_type === 'client' && reply.is_read === false) {\n                          markAsRead(reply.id);\n                        }\n                      }}\n                    >\n                      {/* Unread indicator */}\n                      {reply.sender_type === 'client' && reply.is_read === false && (\n                        <div className=\"absolute -top-2 -right-2 w-4 h-4 bg-red-500 rounded-full flex items-center justify-center\">\n                          <span className=\"text-white text-xs font-bold\">!</span>\n                        </div>\n                      )}\n                      \n                      <div className={`text-sm font-medium mb-2 flex items-center gap-2 ${\n                        reply.sender_type === 'admin' ? 'text-rose-100' : 'text-gray-600'\n                      }`}>\n                        <span>{reply.sender_name}</span>\n                        <span className={`px-2 py-1 rounded-full text-xs ${\n                          reply.sender_type === 'admin' \n                            ? 'bg-white/20 text-white' \n                            : 'bg-gray-300 text-gray-700'\n                        }`}>\n                          {reply.sender_type}\n                        </span>\n                        \n                        {/* Email status indicator */}\n                        {reply.sender_type === 'admin' && reply.email_sent && (\n                          <span className=\"flex items-center gap-1 px-2 py-1 bg-green-100 text-green-700 rounded-full text-xs\">\n                            <Mail className=\"w-3 h-3\" />\n                            Sent\n                          </span>\n                        )}\n                        \n                        {reply.sender_type === 'client' && (\n                          <span className=\"flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-700 rounded-full text-xs\">\n                            <Mail className=\"w-3 h-3\" />\n                            Email\n                          </span>\n                        )}\n                      </div>\n                      \n                      <div className=\"text-sm leading-relaxed\">{reply.message}</div>\n                      \n                      <div className={`text-xs mt-2 flex items-center justify-between ${\n                        reply.sender_type === 'admin' ? 'text-rose-100' : 'text-gray-500'\n                      }`}>\n                        <span>\n                          {new Date(reply.created_at).toLocaleString('en-US', {\n                            month: 'short',\n                            day: 'numeric',\n                            hour: '2-digit',\n                            minute: '2-digit'\n                          })}\n                        </span>\n                        \n                        {reply.sender_type === 'client' && (\n                          <span className={`text-xs ${reply.is_read ? 'text-green-600' : 'text-red-600 font-medium'}`}>\n                            {reply.is_read ? '✓ Read' : '● Unread'}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Reply Form */}\n        <Card className=\"border-rose-200 shadow-lg\">\n          <CardHeader className=\"bg-gradient-to-r from-rose-100 to-pink-100 border-b border-rose-200\">\n            <CardTitle className=\"text-rose-800 flex items-center gap-2\">\n              <Send className=\"h-5 w-5\" />\n              Send Reply as CEO-The Written Hug\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-6 space-y-6\">\n            <div>\n              <Label className=\"text-rose-700 font-medium\">Reply Message</Label>\n              <Textarea\n                value={replyMessage}\n                onChange={(e) => setReplyMessage(e.target.value)}\n                placeholder=\"Type your heartfelt reply here...\"\n                rows={6}\n                className=\"mt-2 border-rose-200 focus:border-rose-400 focus:ring-rose-400 resize-none\"\n              />\n            </div>\n            <Button\n              onClick={sendReply}\n              disabled={!replyMessage.trim() || sending}\n              className=\"w-full bg-gradient-to-r from-rose-500 to-pink-600 hover:from-rose-600 hover:to-pink-700 text-white font-medium py-3 rounded-full transition-all duration-300 transform hover:scale-105\"\n            >\n              <Send className=\"h-4 w-4 mr-2\" />\n              {sending ? 'Sending Kabootar...' : 'Send Kabootar to Client'}\n            </Button>\n            <p className=\"text-sm text-rose-600 text-center\">\n              This will send an email notification to the client and update their order status to \"Replied\"\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n      </div>\n    </div>\n  );\n};\n\n\n\nexport default AdminConversation;","size_bytes":22094},"client/src/pages/AdminDashboard.tsx":{"content":"import React, { useState, useEffect, useRef } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { Eye, Search, Filter, Calendar, User, Mail, Phone, MessageSquare, BarChart3, Users, TrendingUp, Clock, Globe, Heart } from 'lucide-react';\nimport logoImage from '@assets/Untitled design (2)_1755165830517.png';\nimport { useLocation } from 'wouter';\nimport backgroundMusic from '@assets/Evare (PenduJatt.Com.Se)-trimmed_1755178220859.mp3';\n\ninterface Hug {\n  id: string;\n  Name: string;\n  'Recipient\\'s Name': string;\n  'Email Address': string;\n  'Phone Number': number;\n  'Type of Message': string;\n  'Message Details': string;\n  Feelings: string;\n  Story: string;\n  'Specific Details': string;\n  'Delivery Type': string;\n  Status: string;\n  Date: string;\n}\n\nconst AdminDashboard = () => {\n  const [hugs, setHugs] = useState<Hug[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [typeFilter, setTypeFilter] = useState('all');\n  const [unreadCount, setUnreadCount] = useState(0);\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const audioRef = useRef<HTMLAudioElement>(null);\n\n  useEffect(() => {\n    fetchHugs();\n    fetchUnreadCount();\n    \n    // Setup background music\n    const setupBackgroundMusic = () => {\n      if (audioRef.current) {\n        const audio = audioRef.current;\n        audio.volume = 0.18;\n        audio.loop = true;\n        \n        const fadeIn = () => {\n          audio.volume = 0;\n          audio.play().catch(e => console.log('Audio autoplay prevented:', e));\n          \n          const fadeInInterval = setInterval(() => {\n            if (audio.volume < 0.18) {\n              audio.volume = Math.min(audio.volume + 0.01, 0.18);\n            } else {\n              clearInterval(fadeInInterval);\n            }\n          }, 100);\n        };\n\n        const startMusic = () => {\n          fadeIn();\n          document.removeEventListener('click', startMusic);\n        };\n\n        document.addEventListener('click', startMusic, { once: true });\n      }\n    };\n\n    setupBackgroundMusic();\n    \n    // Set up periodic refresh for unread count\n    const interval = setInterval(fetchUnreadCount, 30000); // Refresh every 30 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  const fetchHugs = async () => {\n    try {\n      const response = await fetch('/api/getHugs');\n      const result = await response.json();\n\n      if (result.success) {\n        setHugs(result.hugs || []);\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to fetch hugs\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching hugs:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to connect to server\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchUnreadCount = async () => {\n    try {\n      const response = await fetch('/api/getUnreadCount');\n      const result = await response.json();\n      if (result.success) {\n        setUnreadCount(result.unreadCount);\n      }\n    } catch (error) {\n      console.error('Error fetching unread count:', error);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case 'new': return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'replied': return 'bg-green-100 text-green-800 border-green-200';\n      case 'client replied': return 'bg-orange-100 text-orange-800 border-orange-200';\n      case 'in progress': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'completed': return 'bg-purple-100 text-purple-800 border-purple-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const filteredHugs = hugs.filter(hug => {\n    const matchesSearch = hug.Name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      hug['Email Address'].toLowerCase().includes(searchTerm.toLowerCase()) ||\n      hug['Type of Message'].toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === 'all' || hug.Status?.toLowerCase() === statusFilter.toLowerCase();\n    const matchesType = typeFilter === 'all' || hug['Type of Message']?.toLowerCase() === typeFilter.toLowerCase();\n    \n    return matchesSearch && matchesStatus && matchesType;\n  });\n\n  const handleViewConversation = (hugId: string) => {\n    setLocation(`/admin/conversation/${hugId}`);\n  };\n\n  const getStats = () => {\n    const total = hugs.length;\n    const newCount = hugs.filter(h => h.Status?.toLowerCase() === 'new').length;\n    const repliedCount = hugs.filter(h => h.Status?.toLowerCase() === 'replied').length;\n    const clientRepliedCount = hugs.filter(h => h.Status?.toLowerCase() === 'client replied').length;\n    const inProgressCount = hugs.filter(h => h.Status?.toLowerCase() === 'in progress').length;\n    \n    return { total, newCount, repliedCount, clientRepliedCount, inProgressCount, unreadCount };\n  };\n\n  const stats = getStats();\n\n  const handleLogout = () => {\n    sessionStorage.removeItem('adminLoggedIn');\n    setLocation('/admin/login');\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-rose-50 to-pink-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-rose-500 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600 font-medium\">Loading dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-rose-50 to-pink-50 relative overflow-hidden\">\n      {/* Background Music */}\n      <audio ref={audioRef} preload=\"auto\">\n        <source src={backgroundMusic} type=\"audio/mpeg\" />\n      </audio>\n      {/* Background Floating Elements */}\n      <div className=\"absolute inset-0 pointer-events-none overflow-hidden z-0\">\n        {/* Sparse floating elements with gentle animations */}\n        <div className=\"absolute top-16 left-8 animate-float opacity-20\">\n          <Heart className=\"w-6 h-6 text-rose-100 fill-current\" />\n        </div>\n        <div className=\"absolute top-64 right-16 animate-float delay-2000 opacity-15\">\n          <span className=\"text-2xl\">💌</span>\n        </div>\n        <div className=\"absolute top-96 left-1/4 animate-float delay-4000 opacity-20\">\n          <span className=\"text-xl\">✨</span>\n        </div>\n        <div className=\"absolute top-40 right-1/3 animate-float delay-6000 opacity-15\">\n          <Heart className=\"w-5 h-5 text-pink-100 fill-current\" />\n        </div>\n        <div className=\"absolute top-[200px] left-2/3 animate-float delay-8000 opacity-20\">\n          <span className=\"text-lg\">⭐</span>\n        </div>\n        <div className=\"absolute top-[350px] right-24 animate-float delay-10000 opacity-15\">\n          <span className=\"text-xl\">💝</span>\n        </div>\n        <div className=\"absolute top-[500px] left-16 animate-float delay-12000 opacity-20\">\n          <span className=\"text-lg\">🌟</span>\n        </div>\n        <div className=\"absolute top-[650px] right-2/3 animate-float delay-14000 opacity-15\">\n          <Heart className=\"w-4 h-4 text-rose-100 fill-current\" />\n        </div>\n      </div>\n      \n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b border-rose-100 relative z-10\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center space-x-3\">\n              <img src={logoImage} alt=\"Logo\" className=\"h-8 w-8\" />\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Admin Dashboard</h1>\n                <p className=\"text-sm text-gray-500\">The Written Hug Management</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Button \n                onClick={() => window.open('/', '_blank')} \n                variant=\"outline\" \n                size=\"sm\"\n                className=\"flex items-center space-x-2 rounded-full\"\n              >\n                <Globe className=\"w-4 h-4\" />\n                <span>Written Hug</span>\n              </Button>\n              <Button onClick={handleLogout} variant=\"outline\" size=\"sm\" className=\"rounded-full\">\n                Logout\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 relative z-10\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"bg-white border-0 shadow-md\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Total Messages</p>\n                  <p className=\"text-3xl font-bold text-gray-900\">{stats.total}</p>\n                </div>\n                <div className=\"h-12 w-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <MessageSquare className=\"h-6 w-6 text-blue-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white border-0 shadow-md\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">New Messages</p>\n                  <p className=\"text-3xl font-bold text-blue-600\">{stats.newCount}</p>\n                </div>\n                <div className=\"h-12 w-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <Clock className=\"h-6 w-6 text-blue-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white border-0 shadow-md\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Replied</p>\n                  <p className=\"text-3xl font-bold text-green-600\">{stats.repliedCount}</p>\n                </div>\n                <div className=\"h-12 w-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"h-6 w-6 text-green-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white border-0 shadow-md\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">In Progress</p>\n                  <p className=\"text-3xl font-bold text-yellow-600\">{stats.inProgressCount}</p>\n                </div>\n                <div className=\"h-12 w-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                  <Users className=\"h-6 w-6 text-yellow-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <Tabs defaultValue=\"orders\" className=\"space-y-6\">\n          <TabsList className=\"bg-white border border-rose-100 p-1 rounded-lg shadow-sm\">\n            <TabsTrigger \n              value=\"orders\" \n              className=\"px-6 py-2 text-sm font-medium data-[state=active]:bg-rose-500 data-[state=active]:text-white data-[state=active]:shadow-sm\"\n            >\n              <BarChart3 className=\"w-4 h-4 mr-2\" />\n              Dashboard\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"communications\" \n              className=\"px-6 py-2 text-sm font-medium data-[state=active]:bg-rose-500 data-[state=active]:text-white data-[state=active]:shadow-sm\"\n            >\n              <MessageSquare className=\"w-4 h-4 mr-2\" />\n              Communications\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"orders\">\n            <Card className=\"bg-white border-0 shadow-md\">\n              <CardHeader className=\"border-b border-gray-100 bg-gray-50\">\n                <CardTitle className=\"text-xl text-gray-900 flex items-center\">\n                  <img src={logoImage} alt=\"Logo\" className=\"w-5 h-5 mr-2\" />\n                  Message Orders Overview\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                {/* Filters */}\n                <div className=\"mb-6 grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                    <Input\n                      placeholder=\"Search by name, email, or message type...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10 border-gray-200 focus:border-rose-300 focus:ring-rose-200\"\n                    />\n                  </div>\n                  \n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger className=\"border-gray-200 focus:border-rose-300 focus:ring-rose-200\">\n                      <SelectValue placeholder=\"Filter by status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"new\">New</SelectItem>\n                      <SelectItem value=\"replied\">Replied</SelectItem>\n                      <SelectItem value=\"in progress\">In Progress</SelectItem>\n                      <SelectItem value=\"completed\">Completed</SelectItem>\n                    </SelectContent>\n                  </Select>\n\n                  <Select value={typeFilter} onValueChange={setTypeFilter}>\n                    <SelectTrigger className=\"border-gray-200 focus:border-rose-300 focus:ring-rose-200\">\n                      <SelectValue placeholder=\"Filter by type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Types</SelectItem>\n                      <SelectItem value=\"love letter\">Love Letter</SelectItem>\n                      <SelectItem value=\"gratitude note\">Gratitude Note</SelectItem>\n                      <SelectItem value=\"apology\">Apology</SelectItem>\n                      <SelectItem value=\"celebration\">Celebration</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Orders Table */}\n                <div className=\"overflow-x-auto\">\n                  <div className=\"min-w-full\">\n                    {filteredHugs.length === 0 ? (\n                      <div className=\"text-center py-12\">\n                        <MessageSquare className=\"h-12 w-12 text-gray-300 mx-auto mb-4\" />\n                        <p className=\"text-gray-500 text-lg\">No messages found</p>\n                        <p className=\"text-gray-400 text-sm\">Try adjusting your search filters</p>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-3\">\n                        {filteredHugs.map((hug) => (\n                          <div key={hug.id} className=\"bg-gray-50 border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow\">\n                            <div className=\"grid grid-cols-1 lg:grid-cols-6 gap-4 items-center\">\n                              <div className=\"lg:col-span-2\">\n                                <div className=\"flex items-center space-x-3\">\n                                  <User className=\"h-5 w-5 text-gray-400\" />\n                                  <div className=\"min-w-0 flex-1\">\n                                    <p className=\"text-sm font-semibold text-gray-900 truncate\">{hug.Name}</p>\n                                    <p className=\"text-xs text-gray-500 truncate\">To: {hug['Recipient\\'s Name']}</p>\n                                  </div>\n                                </div>\n                              </div>\n                              \n                              <div>\n                                <div className=\"flex items-center space-x-2\">\n                                  <Mail className=\"h-4 w-4 text-gray-400\" />\n                                  <span className=\"text-sm text-gray-600 truncate\">{hug['Email Address']}</span>\n                                </div>\n                              </div>\n                              \n                              <div>\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {hug['Type of Message']}\n                                </Badge>\n                              </div>\n                              \n                              <div>\n                                <Badge className={`text-xs border ${getStatusColor(hug.Status)}`}>\n                                  {hug.Status || 'New'}\n                                </Badge>\n                              </div>\n                              \n                              <div className=\"flex justify-end\">\n                                <Button\n                                  size=\"sm\"\n                                  onClick={() => handleViewConversation(hug.id)}\n                                  className=\"bg-rose-500 hover:bg-rose-600 text-white px-4 py-2\"\n                                  data-testid={`button-view-${hug.id}`}\n                                >\n                                  <Eye className=\"h-4 w-4 mr-1\" />\n                                  View\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"communications\">\n            <Card className=\"bg-white border-0 shadow-md\">\n              <CardHeader className=\"border-b border-gray-100 bg-gray-50\">\n                <CardTitle className=\"text-xl text-gray-900 flex items-center\">\n                  <MessageSquare className=\"w-5 h-5 mr-2 text-rose-500\" />\n                  Client Communications\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  {filteredHugs.map((hug) => (\n                    <div key={hug.id} className=\"border border-gray-200 rounded-lg p-4 hover:shadow-sm transition-shadow\">\n                      <div className=\"flex justify-between items-start mb-3\">\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-semibold text-gray-900\">{hug.Name}</h3>\n                          <p className=\"text-sm text-gray-500\">{hug['Email Address']} • {new Date(hug.Date).toLocaleDateString()}</p>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge className={`text-xs border ${getStatusColor(hug.Status)}`}>\n                            {hug.Status || 'New'}\n                          </Badge>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleViewConversation(hug.id)}\n                            className=\"rounded-full\"\n                            data-testid={`button-view-conversation-${hug.id}`}\n                          >\n                            <Eye className=\"h-4 w-4 mr-1\" />\n                            Open\n                          </Button>\n                        </div>\n                      </div>\n                      \n                      <div className=\"text-sm text-gray-600\">\n                        <p className=\"mb-2\"><strong>Service:</strong> {hug['Type of Message']} • {hug['Delivery Type']}</p>\n                        <p className=\"mb-2\"><strong>Message:</strong></p>\n                        <div className=\"bg-gray-50 p-3 rounded border text-xs overflow-hidden\">\n                          <p className=\"line-clamp-2\">{hug.Feelings}</p>\n                          {hug.Story && (\n                            <p className=\"mt-2 line-clamp-2 text-gray-500\">{hug.Story}</p>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminDashboard;","size_bytes":21516},"client/src/pages/AdminLogin.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { useLocation } from 'wouter';\nimport { LogIn, MapPin, Sparkles } from 'lucide-react';\nimport logoImage from '@assets/Untitled design (2)_1755165830517.png';\n\ninterface LocationData {\n  latitude: number;\n  longitude: number;\n  city?: string;\n  country?: string;\n}\n\nconst AdminLogin = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [locationData, setLocationData] = useState<LocationData | null>(null);\n  const [locationPermissionGranted, setLocationPermissionGranted] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    // Request location permission when component mounts\n    const requestLocation = async () => {\n      if ('geolocation' in navigator) {\n        try {\n          const position = await new Promise<GeolocationPosition>((resolve, reject) => {\n            navigator.geolocation.getCurrentPosition(\n              resolve,\n              reject,\n              { enableHighAccuracy: true, timeout: 10000, maximumAge: 300000 }\n            );\n          });\n\n          const locationInfo: LocationData = {\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude,\n          };\n\n          // Try to get city and country from reverse geocoding\n          try {\n            const geocodingResponse = await fetch(\n              `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${position.coords.latitude}&longitude=${position.coords.longitude}&localityLanguage=en`\n            );\n            const geocodingData = await geocodingResponse.json();\n            locationInfo.city = geocodingData.city || geocodingData.locality;\n            locationInfo.country = geocodingData.countryName;\n          } catch (geocodingError) {\n            console.warn('Failed to get location details:', geocodingError);\n          }\n\n          setLocationData(locationInfo);\n          setLocationPermissionGranted(true);\n        } catch (error) {\n          console.error('Location access denied:', error);\n          toast({\n            title: \"Location Required\",\n            description: \"Please enable location access to login to the admin panel.\",\n            variant: \"destructive\",\n          });\n        }\n      } else {\n        toast({\n          title: \"Location Not Supported\",\n          description: \"Your browser doesn't support location services.\",\n          variant: \"destructive\",\n        });\n      }\n    };\n\n    requestLocation();\n  }, [toast]);\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!locationPermissionGranted || !locationData) {\n      toast({\n        title: \"Location Required\",\n        description: \"Please enable location access to proceed with login.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const response = await fetch('/api/adminLogin', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          username, \n          password,\n          location: locationData\n        }),\n      });\n\n      const result = await response.json();\n\n      if (result.success) {\n        // Store login state in localStorage\n        localStorage.setItem('adminLoggedIn', 'true');\n        localStorage.setItem('adminUsername', username);\n        \n        toast({\n          title: \"Welcome back!\",\n          description: \"Login successful. Redirecting to orders...\",\n        });\n\n        setTimeout(() => {\n          setLocation('/admin/dashboard');\n        }, 1000);\n      } else {\n        toast({\n          title: \"Login Failed\",\n          description: result.message || \"Invalid credentials\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Network Error\",\n        description: \"Failed to connect to server\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    // Initialize the finisher header animation\n    const script = document.createElement('script');\n    script.src = 'https://cdn.jsdelivr.net/npm/finisher-header@1.7.6/dist/finisher-header.es5.min.js';\n    script.onload = () => {\n      if (window.FinisherHeader) {\n        new window.FinisherHeader({\n          \"count\": 100,\n          \"size\": {\n            \"min\": 2,\n            \"max\": 4,\n            \"pulse\": 0.1\n          },\n          \"speed\": {\n            \"x\": {\n              \"min\": 0,\n              \"max\": 0.4\n            },\n            \"y\": {\n              \"min\": 0,\n              \"max\": 0.7\n            }\n          },\n          \"colors\": {\n            \"background\": \"#ffffff\",\n            \"particles\": [\n              \"#d041c5\",\n              \"#42c0f2\",\n              \"#d27e35\",\n              \"#6a13a1\"\n            ]\n          },\n          \"blending\": \"overlay\",\n          \"opacity\": {\n            \"center\": 1,\n            \"edge\": 0\n          },\n          \"skew\": 0,\n          \"shapes\": [\n            \"t\",\n            \"s\"\n          ]\n        });\n      }\n    };\n    document.head.appendChild(script);\n\n    return () => {\n      document.head.removeChild(script);\n    };\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-background overflow-hidden premium-scroll relative\">\n      {/* Animated Background Header */}\n      <div className=\"finisher-header absolute inset-0 w-full h-full\" style={{ zIndex: 0 }}></div>\n      \n      {/* Enhanced Floating Elements */}\n      <div className=\"absolute inset-0 pointer-events-none overflow-hidden z-10\">\n        <div className=\"absolute top-32 left-16 animate-float opacity-10\">\n          <span className=\"text-2xl\">💝</span>\n        </div>\n        <div className=\"absolute top-96 right-20 animate-float delay-1000 opacity-15\">\n          <span className=\"text-lg\">⭐</span>\n        </div>\n        <div className=\"absolute top-[400px] left-1/4 animate-float delay-2000 opacity-20\">\n          <Sparkles className=\"w-5 h-5 text-purple-200\" />\n        </div>\n        <div className=\"absolute top-[600px] right-1/3 animate-float delay-3000 opacity-15\">\n          <span className=\"text-xl\">🎁</span>\n        </div>\n        <div className=\"absolute top-[200px] right-1/4 animate-float delay-4000 opacity-10\">\n          <span className=\"text-lg\">💖</span>\n        </div>\n        <div className=\"absolute top-[500px] left-1/3 animate-float delay-5000 opacity-15\">\n          <span className=\"text-sm\">✨</span>\n        </div>\n      </div>\n\n      <div className=\"relative z-20 min-h-screen flex items-center justify-center p-6\">\n        <div className=\"w-full max-w-md\">\n          <Card className=\"border-rose-200/30 shadow-2xl backdrop-blur-md bg-white/95 dark:bg-gray-900/95\">\n            <CardHeader className=\"text-center space-y-4\">\n              <div className=\"mx-auto w-16 h-16\">\n                <img src={logoImage} alt=\"The Written Hug\" className=\"h-16 w-16 rounded-full object-cover shadow-lg transform scale-130\" />\n              </div>\n              <CardTitle className=\"text-3xl great-vibes-font bg-gradient-to-r from-rose-600 to-pink-600 bg-clip-text text-transparent\">\n                Admin Portal\n              </CardTitle>\n              <p className=\"text-muted-foreground\">\n                The Written Hug - Admin Access\n              </p>\n              {/* Location verification happens silently in background */}\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <form onSubmit={handleLogin} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"username\" className=\"text-sm font-medium\">\n                    Username\n                  </Label>\n                  <Input\n                    id=\"username\"\n                    type=\"text\"\n                    value={username}\n                    onChange={(e) => setUsername(e.target.value)}\n                    className=\"h-12 border-rose-200/50 focus:border-rose-400 focus:ring-rose-400/20 backdrop-blur-sm\"\n                    placeholder=\"Enter your username\"\n                    required\n                    data-testid=\"input-username\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\" className=\"text-sm font-medium\">\n                    Password\n                  </Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    className=\"h-12 border-rose-200/50 focus:border-rose-400 focus:ring-rose-400/20 backdrop-blur-sm\"\n                    placeholder=\"Enter your password\"\n                    required\n                    data-testid=\"input-password\"\n                  />\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  disabled={loading || !locationPermissionGranted}\n                  className=\"w-full h-12 bg-gradient-to-r from-rose-500 to-pink-600 hover:from-rose-600 hover:to-pink-700 text-white font-medium transition-all duration-200 shadow-lg hover:shadow-xl disabled:opacity-50 rounded-full\"\n                  data-testid=\"button-login\"\n                >\n                  {loading ? (\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                      <span>Signing in...</span>\n                    </div>\n                  ) : !locationPermissionGranted ? (\n                    <div className=\"flex items-center space-x-2\">\n                      <MapPin className=\"h-4 w-4\" />\n                      <span>Waiting for location...</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center space-x-2\">\n                      <LogIn className=\"h-4 w-4\" />\n                      <span>Sign In</span>\n                    </div>\n                  )}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n\n\nexport default AdminLogin;","size_bytes":10683},"client/src/pages/Index.tsx":{"content":"\nimport { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { ArrowRight, Heart, Mail, Star, Users, Clock, MapPin, Sparkles, Gift, MessageCircle, PenTool } from 'lucide-react';\nimport { Link } from 'wouter';\nimport ContactForm from '@/components/ContactForm';\nimport ServiceCard from '@/components/ServiceCard';\nimport CEOSection from '@/components/CEOSection';\nimport TypingAnimation from '@/components/TypingAnimation';\nimport FAQSection from '@/components/FAQSection';\nimport WhyWeExistSection from '@/components/WhyWeExistSection';\nimport StillNotSureSection from '@/components/StillNotSureSection';\nimport backgroundMusic from '@assets/Evare (PenduJatt.Com.Se)-trimmed_1755178220859.mp3';\n\nconst Index = () => {\n  const [scrollY, setScrollY] = useState(0);\n  const [isVisible, setIsVisible] = useState(false);\n  const audioRef = useRef<HTMLAudioElement>(null);\n\n  useEffect(() => {\n    const handleScroll = () => setScrollY(window.scrollY);\n    window.addEventListener('scroll', handleScroll);\n    setIsVisible(true);\n\n    // Setup background music with fade in/out and low volume\n    const setupBackgroundMusic = () => {\n      if (audioRef.current) {\n        const audio = audioRef.current;\n        audio.volume = 0.18; // Set soft volume (18% - 20% increase from 15%)\n        audio.loop = true;\n        \n        // Add smooth fade transition when looping\n        audio.addEventListener('ended', () => {\n          // Quick fade out and back in for smooth loop transition\n          const quickFadeOut = setInterval(() => {\n            if (audio.volume > 0) {\n              audio.volume = Math.max(audio.volume - 0.02, 0);\n            } else {\n              clearInterval(quickFadeOut);\n              audio.currentTime = 0;\n              \n              // Quick fade back in\n              const quickFadeIn = setInterval(() => {\n                if (audio.volume < 0.18) {\n                  audio.volume = Math.min(audio.volume + 0.02, 0.18);\n                } else {\n                  clearInterval(quickFadeIn);\n                }\n              }, 10);\n            }\n          }, 10);\n        });\n        \n        // Fade in effect\n        const fadeIn = () => {\n          audio.volume = 0;\n          audio.play().catch(e => console.log('Audio autoplay prevented:', e));\n          \n          const fadeInInterval = setInterval(() => {\n            if (audio.volume < 0.18) {\n              audio.volume = Math.min(audio.volume + 0.01, 0.18);\n            } else {\n              clearInterval(fadeInInterval);\n            }\n          }, 100);\n        };\n\n        // Handle page visibility change for fade in/out\n        const handleVisibilityChange = () => {\n          if (document.visibilityState === 'visible') {\n            fadeIn();\n          } else {\n            // Fade out when page becomes hidden\n            const fadeOutInterval = setInterval(() => {\n              if (audio.volume > 0) {\n                audio.volume = Math.max(audio.volume - 0.01, 0);\n              } else {\n                audio.pause();\n                clearInterval(fadeOutInterval);\n              }\n            }, 50);\n          }\n        };\n\n        // Start music after user interaction (required by browsers)\n        const startMusic = () => {\n          fadeIn();\n          document.removeEventListener('click', startMusic);\n          document.removeEventListener('keydown', startMusic);\n          document.removeEventListener('touchstart', startMusic);\n        };\n\n        document.addEventListener('click', startMusic, { once: true });\n        document.addEventListener('keydown', startMusic, { once: true });\n        document.addEventListener('touchstart', startMusic, { once: true });\n        document.addEventListener('visibilitychange', handleVisibilityChange);\n\n        return () => {\n          document.removeEventListener('visibilitychange', handleVisibilityChange);\n          document.removeEventListener('click', startMusic);\n          document.removeEventListener('keydown', startMusic);\n          document.removeEventListener('touchstart', startMusic);\n        };\n      }\n    };\n\n    const cleanup = setupBackgroundMusic();\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n      if (cleanup) cleanup();\n    };\n  }, []);\n\n  const scrollToContact = () => {\n    const contactSection = document.getElementById('contact');\n    if (contactSection) {\n      contactSection.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  const services = [\n    {\n      title: \"Love Letters\",\n      description: \"Express your deepest feelings with beautifully crafted love letters that speak directly to the heart.\",\n      image: \"https://images.unsplash.com/photo-1518199266791-5375a83190b7?w=800&h=600&fit=crop\",\n      price: \"₹899\",\n      note: \"Add-ons available based on specific requirements\"\n    },\n    {\n      title: \"Gratitude Messages\", \n      description: \"Say thank you in the most meaningful way with personalized gratitude letters that touch souls.\",\n      image: \"https://images.unsplash.com/photo-1586953208448-b95a79798f07?w=800&h=600&fit=crop\",\n      price: \"₹899\",\n      note: \"Add-ons available based on specific requirements\"\n    },\n    {\n      title: \"Apology Letters\",\n      description: \"Mend hearts and relationships with sincere, heartfelt apology messages that heal wounds.\",\n      image: \"https://images.unsplash.com/photo-1544716278-ca5e3f4abd8c?w=800&h=600&fit=crop\",\n      price: \"₹799\",\n      note: \"Add-ons available based on specific requirements\"\n    },\n    {\n      title: \"Special Occasions\",\n      description: \"Make birthdays, anniversaries, and milestones unforgettable with custom emotional messages.\",\n      image: \"https://images.unsplash.com/photo-1549465220-1a8b9238cd48?w=800&h=600&fit=crop\",\n      price: \"₹1099\",\n      note: \"Add-ons available based on specific requirements\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background overflow-hidden premium-scroll relative\">\n      {/* Background Music */}\n      <audio ref={audioRef} preload=\"auto\">\n        <source src={backgroundMusic} type=\"audio/mpeg\" />\n        Your browser does not support the audio element.\n      </audio>\n      {/* Enhanced Floating Elements that scroll with page */}\n      <div className=\"absolute inset-0 pointer-events-none overflow-hidden z-0\">\n        {/* Heart elements */}\n        <div className=\"absolute top-32 left-16 animate-float opacity-15\">\n          <Heart className=\"w-6 h-6 text-pink-300 fill-current\" />\n        </div>\n        <div className=\"absolute top-96 right-20 animate-float delay-1000 opacity-20\">\n          <Heart className=\"w-4 h-4 text-rose-300 fill-current\" />\n        </div>\n        <div className=\"absolute top-[800px] left-1/4 animate-float delay-2000 opacity-25\">\n          <Heart className=\"w-5 h-5 text-red-300 fill-current\" />\n        </div>\n        \n        {/* Star elements */}\n        <div className=\"absolute top-48 right-32 animate-float delay-500 opacity-20\">\n          <Star className=\"w-5 h-5 text-yellow-300 fill-current\" />\n        </div>\n        <div className=\"absolute top-[600px] left-20 animate-float delay-1500 opacity-15\">\n          <Star className=\"w-6 h-6 text-amber-300 fill-current\" />\n        </div>\n        <div className=\"absolute top-[1200px] right-16 animate-float delay-2500 opacity-20\">\n          <Star className=\"w-4 h-4 text-orange-300 fill-current\" />\n        </div>\n        \n        {/* Gift elements */}\n        <div className=\"absolute top-[400px] right-24 animate-float delay-700 opacity-15\">\n          <Gift className=\"w-5 h-5 text-purple-300\" />\n        </div>\n        <div className=\"absolute top-[1000px] left-32 animate-float delay-1800 opacity-20\">\n          <Gift className=\"w-6 h-6 text-indigo-300\" />\n        </div>\n        \n        {/* Sparkles elements */}\n        <div className=\"absolute top-64 left-1/3 animate-float delay-1200 opacity-15\">\n          <Sparkles className=\"w-5 h-5 text-pink-300\" />\n        </div>\n        <div className=\"absolute top-[900px] right-1/4 animate-float delay-2200 opacity-20\">\n          <Sparkles className=\"w-4 h-4 text-violet-300\" />\n        </div>\n        <div className=\"absolute top-[1400px] left-1/2 animate-float delay-3000 opacity-15\">\n          <Sparkles className=\"w-6 h-6 text-fuchsia-300\" />\n        </div>\n        \n        {/* Additional floating dots */}\n        <div className=\"absolute top-80 right-1/3 animate-float delay-800 opacity-10\">\n          <div className=\"w-3 h-3 bg-pink-400 rounded-full\"></div>\n        </div>\n        <div className=\"absolute top-[700px] left-1/2 animate-float delay-1700 opacity-15\">\n          <div className=\"w-4 h-4 bg-purple-400 rounded-full\"></div>\n        </div>\n        <div className=\"absolute top-[1100px] right-1/3 animate-float delay-2300 opacity-12\">\n          <div className=\"w-2 h-2 bg-rose-400 rounded-full\"></div>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className={`fixed top-0 w-full z-50 transition-all duration-700 ${scrollY > 50 ? 'glass-premium border-b border-border/50 shadow-lg' : 'bg-transparent'}`}>\n        <div className=\"max-w-7xl mx-auto px-6 py-4 flex justify-between items-center\">\n          <div className=\"text-2xl font-bold bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent\">\n            The Written Hug\n          </div>\n          <div className=\"hidden md:flex space-x-8\">\n            <a href=\"#about\" className=\"text-muted-foreground hover:text-primary transition-all duration-300 hover:scale-105\">About</a>\n            <a href=\"#services\" className=\"text-muted-foreground hover:text-primary transition-all duration-300 hover:scale-105\">Services</a>\n            <a href=\"#how-it-works\" className=\"text-muted-foreground hover:text-primary transition-all duration-300 hover:scale-105\">How It Works</a>\n            <a href=\"#contact\" className=\"text-muted-foreground hover:text-primary transition-all duration-300 hover:scale-105\">Contact</a>\n          </div>\n          <Button onClick={scrollToContact} className=\"bg-gradient-to-r from-primary to-purple-600 text-white hover:shadow-xl hover:scale-105 transition-all duration-300\">\n            Get Started\n          </Button>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"relative min-h-screen flex items-center justify-center px-6 py-20 overflow-hidden\">\n        <div className={`absolute inset-0 bg-gradient-to-br from-pink-50/20 to-purple-50/20 transition-all duration-1000 ${isVisible ? 'opacity-100' : 'opacity-0'}`} \n             style={{ transform: `translateY(${scrollY * 0.1}px)` }} />\n        <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(255,182,193,0.08),transparent_50%)]\" />\n        \n        {/* Elegant Floating Elements */}\n        <div className=\"absolute top-20 left-10 animate-float opacity-40\">\n          <div className=\"w-6 h-6 text-pink-300/60\">\n            <Heart className=\"w-full h-full fill-current\" />\n          </div>\n        </div>\n        <div className=\"absolute top-32 right-20 animate-float delay-1000 opacity-30\">\n          <div className=\"w-4 h-4 text-rose-300/50\">\n            <Heart className=\"w-full h-full fill-current\" />\n          </div>\n        </div>\n        <div className=\"absolute bottom-40 left-20 animate-float delay-2000 opacity-25\">\n          <div className=\"w-8 h-8 text-pink-200/40\">\n            <Heart className=\"w-full h-full fill-current\" />\n          </div>\n        </div>\n        \n        <div className={`text-center max-w-5xl mx-auto relative z-10 transition-all duration-1000 delay-300 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'}`}>\n          <h1 className=\"text-6xl md:text-8xl font-bold mb-8 leading-tight\">\n            <TypingAnimation \n              text=\"A hug without touch, but meaning so much\"\n              speed={80}\n              className=\"bg-gradient-to-r from-primary via-purple-600 to-pink-600 bg-clip-text text-transparent\"\n            />\n          </h1>\n          \n          <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 leading-relaxed times-new-roman-italic\">\n            Your feelings. My words. Their smile.\n          </p>\n          \n          <p className=\"text-lg md:text-xl text-muted-foreground mb-12 leading-relaxed\">\n            We help you express what your heart holds but words can't quite say.\n            <br />\n            In every unspoken moment, there lives a feeling waiting for its voice—let us help you set it free.\n          </p>\n          \n          <div className=\"flex justify-center\">\n            <Button onClick={scrollToContact} size=\"lg\" className=\"bg-gradient-to-r from-primary to-purple-600 text-white px-8 py-4 text-lg group hover:scale-105 hover:shadow-2xl transition-all duration-300\">\n              Start Your Message\n              <ArrowRight className=\"ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Premium Floating Background Elements */}\n        <div className=\"absolute top-1/4 left-10 w-20 h-20 bg-gradient-to-r from-pink-300/10 to-rose-300/10 rounded-full blur-xl animate-pulse\" />\n        <div className=\"absolute bottom-1/4 right-10 w-32 h-32 bg-gradient-to-r from-purple-300/10 to-pink-300/10 rounded-full blur-xl animate-pulse delay-1000\" />\n      </section>\n\n      {/* About Section */}\n      <section id=\"about\" className=\"py-32 px-6 bg-gradient-to-b from-background to-muted/10 relative overflow-hidden\">\n        <div className=\"max-w-6xl mx-auto relative z-10\">\n          <div className=\"text-center mb-20\">\n            <h2 className=\"text-5xl md:text-6xl font-bold mb-8\">\n              <span className=\"bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent\">\n                Share a smile,\n              </span>\n              <br />\n              The Written Hug style\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto leading-relaxed\">\n              Whether it's love, gratitude, apology, or something deeply personal, we take your raw feelings \n              and turn them into beautifully crafted messages — written with care, designed with emotion.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <Card className=\"group hover:shadow-2xl transition-all duration-700 border-0 bg-gradient-to-br from-background to-muted/30 hover:-translate-y-2\">\n              <CardContent className=\"p-8 text-center\">\n                <Heart className=\"h-12 w-12 mx-auto mb-6 text-muted-foreground group-hover:text-red-500 group-hover:scale-110 transition-all duration-500\" />\n                <h3 className=\"text-2xl font-semibold mb-4\">Heartfelt Connection</h3>\n                <p className=\"text-muted-foreground\">Every message is crafted to create genuine emotional connections that last forever.</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"group hover:shadow-2xl transition-all duration-700 border-0 bg-gradient-to-br from-background to-muted/30 hover:-translate-y-2\">\n              <CardContent className=\"p-8 text-center\">\n                <Mail className=\"h-12 w-12 mx-auto mb-6 text-muted-foreground group-hover:text-blue-500 group-hover:scale-110 transition-all duration-500\" />\n                <h3 className=\"text-2xl font-semibold mb-4\">Beautiful Presentation</h3>\n                <p className=\"text-muted-foreground\">Each letter is elegantly designed and presented to make the moment truly special.</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"group hover:shadow-2xl transition-all duration-700 border-0 bg-gradient-to-br from-background to-muted/30 hover:-translate-y-2\">\n              <CardContent className=\"p-8 text-center\">\n                <Users className=\"h-12 w-12 mx-auto mb-6 text-muted-foreground group-hover:text-green-500 group-hover:scale-110 transition-all duration-500\" />\n                <h3 className=\"text-2xl font-semibold mb-4\">Personal Touch</h3>\n                <p className=\"text-muted-foreground\">Every word is chosen carefully to reflect your unique voice and emotions.</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CEO Section */}\n      <CEOSection />\n\n      {/* Why We Exist Section */}\n      <WhyWeExistSection />\n\n      {/* New Business Story Section */}\n      <section className=\"py-32 px-6 bg-gradient-to-b from-pink-50/10 to-purple-50/10 relative overflow-hidden z-10\">\n        <div className=\"max-w-4xl mx-auto relative z-10\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-5xl md:text-6xl font-bold mb-8\">\n              <span className=\"bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent\">\n                We Didn't Mean to Start a Business…\n              </span>\n              <br />\n              <span className=\"text-foreground text-4xl\">But...</span>\n            </h2>\n          </div>\n\n          <div className=\"space-y-8 text-lg leading-relaxed text-muted-foreground\">\n            <p className=\"text-xl font-medium text-primary times-new-roman-italic\">\n              It started with a \"HELP!\" message at 11:11 PM.\n            </p>\n            \n            <p>\n              A friend had something important to say—something heartfelt, something that mattered—but no clue how to put it into words. They tried. And failed. Then panicked. Then called Onaamika.\n            </p>\n\n            <p>\n              With nothing but feelings and chaos on the table, she sat down and wrote. No fluff, no filters—just pure emotion, carefully translated into words.\n            </p>\n\n            <p className=\"text-xl font-semibold text-foreground times-new-roman-italic\">\n              When that message was sent, it didn't just land.<br />\n              It connected. It healed. It made someone smile in a way only true words can.\n            </p>\n\n            <p className=\"text-lg font-medium text-primary times-new-roman-italic\">\n              That's when the spark lit:<br />\n              What if we could help more people say what they truly feel, but don't know how?\n            </p>\n\n            <div className=\"bg-gradient-to-r from-pink-50/50 to-purple-50/50 p-8 rounded-3xl border border-pink-200/30\">\n              <p className=\"text-xl font-semibold text-foreground mb-4\">Because let's be honest —</p>\n              <p className=\"times-new-roman-italic\">We live in a world where people are constantly feeling deeply…</p>\n              <p className=\"font-medium times-new-roman-italic\">…but rarely saying it meaningfully.</p>\n            </div>\n\n            <p>\n              Most of us are either too busy, too shy, or just not fluent in \"emotional poetry.\"<br />\n              And that's okay. That's where we come in.\n            </p>\n\n            <div className=\"text-center py-8\">\n              <p className=\"text-2xl font-bold bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent times-new-roman-italic\">\n                We're the translators of the heart.\n              </p>\n            </div>\n\n            <p>\n              At The Written Hug, we turn raw, unspoken feelings into beautiful, soul-stirring letters.<br />\n              Love, gratitude, apology, celebration — whatever's on your heart, we craft it into words that move people.\n            </p>\n\n            <p>\n              And we don't just write — we create.<br />\n              Each message is carefully written, lovingly designed, and delivered with a personal touch that feels like a handwritten hug.\n            </p>\n\n            <div className=\"bg-gradient-to-r from-yellow-50/50 to-orange-50/50 p-8 rounded-3xl border border-yellow-200/30\">\n              <p className=\"text-xl font-semibold text-foreground mb-2\">Why?</p>\n              <p className=\"times-new-roman-italic\">Because in a world full of auto-replies and emoji shortcuts, authentic emotion stands out.</p>\n            </div>\n\n            <p className=\"text-xl text-center font-medium text-primary times-new-roman-italic\">\n              So if you're someone who feels a lot but freezes at the keyboard, don't worry — we've made it our art to say what you can't.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Services Section */}\n      <section id=\"services\" className=\"py-32 px-6 relative overflow-hidden z-10\">\n        <div className=\"max-w-7xl mx-auto relative z-10\">\n          <div className=\"text-center mb-20\">\n            <h2 className=\"text-5xl md:text-6xl font-bold mb-8\">\n              Feelings found in\n              <br />\n              <span className=\"bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent\">\n                flowing ink\n              </span>\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Choose from our range of personalized writing services, each crafted to perfection\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {services.map((service, index) => (\n              <ServiceCard key={index} {...service} />\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works Section */}\n      <section id=\"how-it-works\" className=\"py-32 px-6 bg-gradient-to-b from-muted/10 to-background relative overflow-hidden z-10\">\n        <div className=\"max-w-6xl mx-auto relative z-10\">\n          <div className=\"text-center mb-20\">\n            <h2 className=\"text-5xl md:text-6xl font-bold mb-8\">\n              How It Works\n            </h2>\n            <p className=\"text-xl text-muted-foreground\">\n              Simple steps to transform your feelings into beautiful words\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            {[\n              { \n                step: \"01\", \n                title: \"Share Your Story\", \n                desc: \"Tell us about your feelings, the person, and what you want to express\",\n                icon: MessageCircle,\n                color: \"from-pink-500 to-rose-500\"\n              },\n              { \n                step: \"02\", \n                title: \"We Craft Magic\", \n                desc: \"Our team transforms your emotions into beautifully written messages\",\n                icon: PenTool,\n                color: \"from-purple-500 to-indigo-500\"\n              },\n              { \n                step: \"03\", \n                title: \"Review & Refine\", \n                desc: \"We'll share the draft for your approval and make any adjustments\",\n                icon: Star,\n                color: \"from-yellow-500 to-orange-500\"\n              },\n              { \n                step: \"04\", \n                title: \"Delivered with Love\", \n                desc: \"Receive your personalized message, ready to touch hearts\",\n                icon: Gift,\n                color: \"from-green-500 to-emerald-500\"\n              }\n            ].map((item, index) => (\n              <div key={index} className=\"text-center group relative hover:scale-105 transition-all duration-500\">\n                {/* Connection line */}\n                {index < 3 && (\n                  <div className=\"hidden md:block absolute top-10 left-full w-full h-0.5 bg-gradient-to-r from-muted-foreground/20 to-transparent transform translate-x-4 z-0\"></div>\n                )}\n                \n                <div className=\"relative z-10\">\n                  <div className={`w-20 h-20 mx-auto mb-6 bg-gradient-to-r ${item.color} rounded-full flex items-center justify-center text-white text-xl font-bold group-hover:scale-110 transition-all duration-500 shadow-lg group-hover:shadow-2xl`}>\n                    <span>{item.step}</span>\n                  </div>\n                  \n                  <div className=\"mb-4 group-hover:scale-110 transition-transform duration-300\">\n                    <item.icon className=\"w-8 h-8 mx-auto text-muted-foreground group-hover:text-primary transition-colors duration-300\" />\n                  </div>\n                  \n                  <h3 className=\"text-xl font-semibold mb-4 group-hover:text-primary transition-colors duration-300\">{item.title}</h3>\n                  <p className=\"text-muted-foreground group-hover:text-foreground transition-colors duration-300\">{item.desc}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Delivery Info Section */}\n      <section className=\"py-20 px-6 bg-gradient-to-r from-pink-50/30 to-purple-50/30 relative overflow-hidden z-10\">\n        <div className=\"max-w-4xl mx-auto text-center relative z-10\">\n          <div className=\"mb-12\">\n            <p className=\"text-2xl font-medium text-primary times-new-roman-italic mb-6\">\n              Your feelings, perfectly packaged, arrive exactly where they're meant to live—in the heart.\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"flex flex-col items-center group\">\n              <MapPin className=\"h-12 w-12 text-muted-foreground group-hover:text-green-500 group-hover:scale-110 transition-all duration-500 mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-2\">All Over India</h3>\n              <p className=\"text-muted-foreground\">We deliver to every corner of the country</p>\n            </div>\n            <div className=\"flex flex-col items-center group\">\n              <Clock className=\"h-12 w-12 text-muted-foreground group-hover:text-blue-600 group-hover:scale-110 transition-all duration-500 mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-2\">10-15 Days</h3>\n              <p className=\"text-muted-foreground\">Standard free delivery timeline</p>\n            </div>\n            <div className=\"flex flex-col items-center group\">\n              <Heart className=\"h-12 w-12 text-muted-foreground group-hover:text-red-500 group-hover:scale-110 transition-all duration-500 mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-2\">Made with Love</h3>\n              <p className=\"text-muted-foreground\">Every message crafted with care</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ Section */}\n      <FAQSection />\n\n      {/* Still Not Sure Section */}\n      <StillNotSureSection />\n\n      {/* Contact Section */}\n      <section id=\"contact\" className=\"py-32 px-6 relative overflow-hidden z-10\">\n        <div className=\"max-w-4xl mx-auto relative z-10\">\n          <div className=\"text-center mb-20\">\n            <h2 className=\"text-5xl md:text-6xl font-bold mb-8\">\n              Share Your Heart\n              <br />\n              <span className=\"bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent\">\n                With Us\n              </span>\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8\">\n              Ready to express what your heart holds? Share your story with us.\n            </p>\n            <p className=\"text-lg text-muted-foreground\">\n              Questions? Reach us at{\" \"}\n              <a href=\"mailto:onaamikasadguru@gmail.com\" className=\"text-primary hover:underline transition-all duration-300\">\n                onaamikasadguru@gmail.com\n              </a>\n            </p>\n          </div>\n\n          <ContactForm />\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"py-16 px-6 bg-muted/10 border-t border-border/50 relative overflow-hidden z-10\">\n        <div className=\"max-w-6xl mx-auto text-center relative z-10\">\n          <div className=\"text-3xl font-bold bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent mb-6 canduful-font\">\n            The Written Hug\n          </div>\n          <p className=\"text-muted-foreground mb-8\">\n            A hug without touch, but meaning so much\n          </p>\n          <div className=\"flex justify-center space-x-8 text-sm text-muted-foreground\">\n            <span>Made with ❤️ in India</span>\n            <span>•</span>\n            <a href=\"mailto:onaamikasadguru@gmail.com\" className=\"hover:text-primary transition-colors duration-300\">\n              Contact Us\n            </a>\n            <span>•</span>\n            <Link href=\"/admin/login\">\n              <button className=\"hover:text-primary transition-colors duration-300 underline text-xs\">\n                Admin Portal\n              </button>\n            </Link>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n};\n\nexport default Index;\n","size_bytes":28755},"client/src/pages/NotFound.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\n\nconst NotFound = () => {\n  const [location] = useLocation();\n\n  useEffect(() => {\n    console.error(\n      \"404 Error: User attempted to access non-existent route:\",\n      location\n    );\n  }, [location]);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold mb-4\">404</h1>\n        <p className=\"text-xl text-gray-600 mb-4\">Oops! Page not found</p>\n        <a href=\"/\" className=\"text-blue-500 hover:text-blue-700 underline\">\n          Return to Home\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","size_bytes":713},"client/src/types/global.d.ts":{"content":"// Global type declarations\ndeclare global {\n  interface Window {\n    FinisherHeader: any;\n  }\n}\n\nexport {};","size_bytes":108},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:size-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2701},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ..._props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ..._props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n","size_bytes":2620},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7295},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"client/src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"import * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n  VariantProps<typeof sheetVariants> { }\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet, SheetClose,\n  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger\n}\n\n","size_bytes":4250},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23367},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/sonner.tsx":{"content":"import { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, toast } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster, toast }\n","size_bytes":894},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145},"client/src/components/ui/use-toast.ts":{"content":"import { useToast, toast } from \"@/hooks/use-toast\";\n\nexport { useToast, toast };\n","size_bytes":82},"RENDER_DEPLOYMENT.md":{"content":"# Render Deployment Guide for The Written Hug\n\n## Prerequisites\n\n1. Create a Render account at https://render.com\n2. Connect your GitHub/GitLab repository to Render\n\n## Deployment Steps\n\n### 1. Create a New Web Service\n\n1. Go to Render Dashboard\n2. Click \"New\" → \"Web Service\"\n3. Connect your repository\n4. Configure the service:\n\n### 2. Service Configuration\n\n**Basic Settings:**\n- **Name**: written-hug\n- **Environment**: Node\n- **Build Command**: `npm install && npm run build`\n- **Start Command**: `npm start`\n- **Plan**: Starter (Free) or higher\n\n### 3. Environment Variables\n\nAdd the following environment variables in Render dashboard:\n\n```\nNODE_ENV=production\nBREVO_API_KEY=<your-brevo-api-key>\nNEXT_PUBLIC_SUPABASE_ANON_KEY=<your-supabase-anon-key>\nSUPABASE_SERVICE_ROLE_KEY=<your-supabase-service-key>\n```\n\n### 4. Advanced Settings\n\n- **Auto-Deploy**: Enable (optional)\n- **Branch**: main\n- **Root Directory**: Leave blank (uses project root)\n\n### 5. Deploy\n\n1. Click \"Create Web Service\"\n2. Render will automatically build and deploy your application\n3. The deployment URL will be provided once complete\n\n## Post-Deployment\n\n1. Test all features:\n   - Form submissions\n   - Admin login\n   - Email notifications\n   - Admin dashboard functionality\n\n2. Update CORS settings if needed for your domain\n\n## Notes\n\n- The application uses Supabase for database (no additional database setup required)\n- Email service uses Brevo (configured via API key)\n- Static assets are served from the built application\n- Background music will be included in the build\n\n## Troubleshooting\n\n1. **Build failures**: Check that all dependencies are in package.json\n2. **Environment variables**: Ensure all secrets are properly set\n3. **Database issues**: Verify Supabase keys and permissions\n4. **Email issues**: Check Brevo API key and configuration\n\n## Support\n\nFor deployment issues, refer to Render documentation or contact their support.","size_bytes":1930}}}